{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Fruit.svelte","../../src/decimal.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.55.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<button on:click>\r\n    {name} - <span class=\"small\">${price}</span>\r\n</button>\r\n\r\n<script>\r\n\r\n    export let name, price\r\n\r\n</script>\r\n\r\n<style>\r\n    button {\r\n        border-radius: 5px;\r\n        border: 1px solid;\r\n        display: inline;\r\n        padding: 5px;\r\n        margin-top: 5px;\r\n        margin-right: 5px;\r\n        transition: background-color 0.25s;\r\n        background-color: var(--color);\r\n    }\r\n    button:hover {\r\n        background-color: var(--hovercolor);\r\n    }\r\n    .small {\r\n        font-size: small;\r\n    }\r\n</style>\r\n\r\n",";(function (globalScope) {\r\n    'use strict';\r\n  \r\n  \r\n    /*!\r\n     *  decimal.js v10.4.3\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n  \r\n  \r\n    // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n  \r\n  \r\n      // The maximum exponent magnitude.\r\n      // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n    var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n  \r\n      // The limit on the value of `precision`, and on the value of the first argument to\r\n      // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n      MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n  \r\n      // Base conversion alphabet.\r\n      NUMERALS = '0123456789abcdef',\r\n  \r\n      // The natural logarithm of 10 (1025 digits).\r\n      LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n  \r\n      // Pi (1025 digits).\r\n      PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n  \r\n  \r\n      // The initial configuration properties of the Decimal constructor.\r\n      DEFAULTS = {\r\n  \r\n        // These values must be integers within the stated ranges (inclusive).\r\n        // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n  \r\n        // The maximum number of significant digits of the result of a calculation or base conversion.\r\n        // E.g. `Decimal.config({ precision: 20 });`\r\n        precision: 20,                         // 1 to MAX_DIGITS\r\n  \r\n        // The rounding mode used when rounding to `precision`.\r\n        //\r\n        // ROUND_UP         0 Away from zero.\r\n        // ROUND_DOWN       1 Towards zero.\r\n        // ROUND_CEIL       2 Towards +Infinity.\r\n        // ROUND_FLOOR      3 Towards -Infinity.\r\n        // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n        // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n        // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n        // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n        // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n        //\r\n        // E.g.\r\n        // `Decimal.rounding = 4;`\r\n        // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n        rounding: 4,                           // 0 to 8\r\n  \r\n        // The modulo mode used when calculating the modulus: a mod n.\r\n        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n        // The remainder (r) is calculated as: r = a - n * q.\r\n        //\r\n        // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n        // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n        // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n        // HALF_EVEN  6 The IEEE 754 remainder function.\r\n        // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n        //\r\n        // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n        // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n        // be used, but they may not give useful results.\r\n        modulo: 1,                             // 0 to 9\r\n  \r\n        // The exponent value at and beneath which `toString` returns exponential notation.\r\n        // JavaScript numbers: -7\r\n        toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n  \r\n        // The exponent value at and above which `toString` returns exponential notation.\r\n        // JavaScript numbers: 21\r\n        toExpPos:  21,                         // 0 to EXP_LIMIT\r\n  \r\n        // The minimum exponent value, beneath which underflow to zero occurs.\r\n        // JavaScript numbers: -324  (5e-324)\r\n        minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n  \r\n        // The maximum exponent value, above which overflow to Infinity occurs.\r\n        // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n        maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n  \r\n        // Whether to use cryptographically-secure random number generation, if available.\r\n        crypto: false                          // true/false\r\n      },\r\n  \r\n  \r\n    // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n  \r\n  \r\n      Decimal, inexact, noConflict, quadrant,\r\n      external = true,\r\n  \r\n      decimalError = '[DecimalError] ',\r\n      invalidArgument = decimalError + 'Invalid argument: ',\r\n      precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n      cryptoUnavailable = decimalError + 'crypto unavailable',\r\n      tag = '[object Decimal]',\r\n  \r\n      mathfloor = Math.floor,\r\n      mathpow = Math.pow,\r\n  \r\n      isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n      isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n      isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n      isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n  \r\n      BASE = 1e7,\r\n      LOG_BASE = 7,\r\n      MAX_SAFE_INTEGER = 9007199254740991,\r\n  \r\n      LN10_PRECISION = LN10.length - 1,\r\n      PI_PRECISION = PI.length - 1,\r\n  \r\n      // Decimal.prototype object\r\n      P = { toStringTag: tag };\r\n  \r\n  \r\n    // Decimal prototype methods\r\n  \r\n  \r\n    /*\r\n     *  absoluteValue             abs\r\n     *  ceil\r\n     *  clampedTo                 clamp\r\n     *  comparedTo                cmp\r\n     *  cosine                    cos\r\n     *  cubeRoot                  cbrt\r\n     *  decimalPlaces             dp\r\n     *  dividedBy                 div\r\n     *  dividedToIntegerBy        divToInt\r\n     *  equals                    eq\r\n     *  floor\r\n     *  greaterThan               gt\r\n     *  greaterThanOrEqualTo      gte\r\n     *  hyperbolicCosine          cosh\r\n     *  hyperbolicSine            sinh\r\n     *  hyperbolicTangent         tanh\r\n     *  inverseCosine             acos\r\n     *  inverseHyperbolicCosine   acosh\r\n     *  inverseHyperbolicSine     asinh\r\n     *  inverseHyperbolicTangent  atanh\r\n     *  inverseSine               asin\r\n     *  inverseTangent            atan\r\n     *  isFinite\r\n     *  isInteger                 isInt\r\n     *  isNaN\r\n     *  isNegative                isNeg\r\n     *  isPositive                isPos\r\n     *  isZero\r\n     *  lessThan                  lt\r\n     *  lessThanOrEqualTo         lte\r\n     *  logarithm                 log\r\n     *  [maximum]                 [max]\r\n     *  [minimum]                 [min]\r\n     *  minus                     sub\r\n     *  modulo                    mod\r\n     *  naturalExponential        exp\r\n     *  naturalLogarithm          ln\r\n     *  negated                   neg\r\n     *  plus                      add\r\n     *  precision                 sd\r\n     *  round\r\n     *  sine                      sin\r\n     *  squareRoot                sqrt\r\n     *  tangent                   tan\r\n     *  times                     mul\r\n     *  toBinary\r\n     *  toDecimalPlaces           toDP\r\n     *  toExponential\r\n     *  toFixed\r\n     *  toFraction\r\n     *  toHexadecimal             toHex\r\n     *  toNearest\r\n     *  toNumber\r\n     *  toOctal\r\n     *  toPower                   pow\r\n     *  toPrecision\r\n     *  toSignificantDigits       toSD\r\n     *  toString\r\n     *  truncated                 trunc\r\n     *  valueOf                   toJSON\r\n     */\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the absolute value of this Decimal.\r\n     *\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new this.constructor(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return finalise(x);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n     * direction of positive Infinity.\r\n     *\r\n     */\r\n    P.ceil = function () {\r\n      return finalise(new this.constructor(this), this.e + 1, 2);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n     * delineated by `min` and `max`.\r\n     *\r\n     * min {number|string|Decimal}\r\n     * max {number|string|Decimal}\r\n     *\r\n     */\r\n    P.clampedTo = P.clamp = function (min, max) {\r\n      var k,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n      min = new Ctor(min);\r\n      max = new Ctor(max);\r\n      if (!min.s || !max.s) return new Ctor(NaN);\r\n      if (min.gt(max)) throw Error(invalidArgument + max);\r\n      k = x.cmp(min);\r\n      return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return\r\n     *   1    if the value of this Decimal is greater than the value of `y`,\r\n     *  -1    if the value of this Decimal is less than the value of `y`,\r\n     *   0    if they have the same value,\r\n     *   NaN  if the value of either Decimal is NaN.\r\n     *\r\n     */\r\n    P.comparedTo = P.cmp = function (y) {\r\n      var i, j, xdL, ydL,\r\n        x = this,\r\n        xd = x.d,\r\n        yd = (y = new x.constructor(y)).d,\r\n        xs = x.s,\r\n        ys = y.s;\r\n  \r\n      // Either NaN or ±Infinity?\r\n      if (!xd || !yd) {\r\n        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n      }\r\n  \r\n      // Either zero?\r\n      if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n  \r\n      // Signs differ?\r\n      if (xs !== ys) return xs;\r\n  \r\n      // Compare exponents.\r\n      if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n  \r\n      xdL = xd.length;\r\n      ydL = yd.length;\r\n  \r\n      // Compare digit by digit.\r\n      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n        if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n      }\r\n  \r\n      // Compare lengths.\r\n      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-1, 1]\r\n     *\r\n     * cos(0)         = 1\r\n     * cos(-0)        = 1\r\n     * cos(Infinity)  = NaN\r\n     * cos(-Infinity) = NaN\r\n     * cos(NaN)       = NaN\r\n     *\r\n     */\r\n    P.cosine = P.cos = function () {\r\n      var pr, rm,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.d) return new Ctor(NaN);\r\n  \r\n      // cos(0) = cos(-0) = 1\r\n      if (!x.d[0]) return new Ctor(1);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n      Ctor.rounding = 1;\r\n  \r\n      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n  \r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n    };\r\n  \r\n  \r\n    /*\r\n     *\r\n     * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n     * `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     *  cbrt(0)  =  0\r\n     *  cbrt(-0) = -0\r\n     *  cbrt(1)  =  1\r\n     *  cbrt(-1) = -1\r\n     *  cbrt(N)  =  N\r\n     *  cbrt(-I) = -I\r\n     *  cbrt(I)  =  I\r\n     *\r\n     * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n     *\r\n     */\r\n    P.cubeRoot = P.cbrt = function () {\r\n      var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n      external = false;\r\n  \r\n      // Initial estimate.\r\n      s = x.s * mathpow(x.s * x, 1 / 3);\r\n  \r\n       // Math.cbrt underflow/overflow?\r\n       // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n      if (!s || Math.abs(s) == 1 / 0) {\r\n        n = digitsToString(x.d);\r\n        e = x.e;\r\n  \r\n        // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n        if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n        s = mathpow(n, 1 / 3);\r\n  \r\n        // Rarely, e may be one less than the result exponent value.\r\n        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n  \r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n  \r\n        r = new Ctor(n);\r\n        r.s = x.s;\r\n      } else {\r\n        r = new Ctor(s.toString());\r\n      }\r\n  \r\n      sd = (e = Ctor.precision) + 3;\r\n  \r\n      // Halley's method.\r\n      // TODO? Compare Newton's method.\r\n      for (;;) {\r\n        t = r;\r\n        t3 = t.times(t).times(t);\r\n        t3plusx = t3.plus(x);\r\n        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n  \r\n        // TODO? Replace with for-loop and checkRoundingDigits.\r\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n          n = n.slice(sd - 3, sd + 1);\r\n  \r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n          // , i.e. approaching a rounding boundary, continue the iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n  \r\n            // On the first iteration only, check to see if rounding up gives the exact result as the\r\n            // nines may infinitely repeat.\r\n            if (!rep) {\r\n              finalise(t, e + 1, 0);\r\n  \r\n              if (t.times(t).times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n  \r\n            sd += 4;\r\n            rep = 1;\r\n          } else {\r\n  \r\n            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n            // If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n  \r\n              // Truncate to the first rounding digit.\r\n              finalise(r, e + 1, 1);\r\n              m = !r.times(r).times(r).eq(x);\r\n            }\r\n  \r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      external = true;\r\n  \r\n      return finalise(r, e, Ctor.rounding, m);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return the number of decimal places of the value of this Decimal.\r\n     *\r\n     */\r\n    P.decimalPlaces = P.dp = function () {\r\n      var w,\r\n        d = this.d,\r\n        n = NaN;\r\n  \r\n      if (d) {\r\n        w = d.length - 1;\r\n        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n  \r\n        // Subtract the number of trailing zeros of the last word.\r\n        w = d[w];\r\n        if (w) for (; w % 10 == 0; w /= 10) n--;\r\n        if (n < 0) n = 0;\r\n      }\r\n  \r\n      return n;\r\n    };\r\n  \r\n  \r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n     * `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.dividedBy = P.div = function (y) {\r\n      return divide(this, new this.constructor(y));\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n     * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.dividedToIntegerBy = P.divToInt = function (y) {\r\n      var x = this,\r\n        Ctor = x.constructor;\r\n      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n     *\r\n     */\r\n    P.equals = P.eq = function (y) {\r\n      return this.cmp(y) === 0;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n     * direction of negative Infinity.\r\n     *\r\n     */\r\n    P.floor = function () {\r\n      return finalise(new this.constructor(this), this.e + 1, 3);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n     * false.\r\n     *\r\n     */\r\n    P.greaterThan = P.gt = function (y) {\r\n      return this.cmp(y) > 0;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n     * otherwise return false.\r\n     *\r\n     */\r\n    P.greaterThanOrEqualTo = P.gte = function (y) {\r\n      var k = this.cmp(y);\r\n      return k == 1 || k === 0;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n     * Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [1, Infinity]\r\n     *\r\n     * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n     *\r\n     * cosh(0)         = 1\r\n     * cosh(-0)        = 1\r\n     * cosh(Infinity)  = Infinity\r\n     * cosh(-Infinity) = Infinity\r\n     * cosh(NaN)       = NaN\r\n     *\r\n     *  x        time taken (ms)   result\r\n     * 1000      9                 9.8503555700852349694e+433\r\n     * 10000     25                4.4034091128314607936e+4342\r\n     * 100000    171               1.4033316802130615897e+43429\r\n     * 1000000   3817              1.5166076984010437725e+434294\r\n     * 10000000  abandoned after 2 minute wait\r\n     *\r\n     * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n     *\r\n     */\r\n    P.hyperbolicCosine = P.cosh = function () {\r\n      var k, n, pr, rm, len,\r\n        x = this,\r\n        Ctor = x.constructor,\r\n        one = new Ctor(1);\r\n  \r\n      if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n      if (x.isZero()) return one;\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n      Ctor.rounding = 1;\r\n      len = x.d.length;\r\n  \r\n      // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n      // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n  \r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      // TODO? Estimation reused from cosine() and may not be optimal here.\r\n      if (len < 32) {\r\n        k = Math.ceil(len / 3);\r\n        n = (1 / tinyPow(4, k)).toString();\r\n      } else {\r\n        k = 16;\r\n        n = '2.3283064365386962890625e-10';\r\n      }\r\n  \r\n      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n  \r\n      // Reverse argument reduction\r\n      var cosh2_x,\r\n        i = k,\r\n        d8 = new Ctor(8);\r\n      for (; i--;) {\r\n        cosh2_x = x.times(x);\r\n        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n      }\r\n  \r\n      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n     * Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-Infinity, Infinity]\r\n     *\r\n     * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n     *\r\n     * sinh(0)         = 0\r\n     * sinh(-0)        = -0\r\n     * sinh(Infinity)  = Infinity\r\n     * sinh(-Infinity) = -Infinity\r\n     * sinh(NaN)       = NaN\r\n     *\r\n     * x        time taken (ms)\r\n     * 10       2 ms\r\n     * 100      5 ms\r\n     * 1000     14 ms\r\n     * 10000    82 ms\r\n     * 100000   886 ms            1.4033316802130615897e+43429\r\n     * 200000   2613 ms\r\n     * 300000   5407 ms\r\n     * 400000   8824 ms\r\n     * 500000   13026 ms          8.7080643612718084129e+217146\r\n     * 1000000  48543 ms\r\n     *\r\n     * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n     *\r\n     */\r\n    P.hyperbolicSine = P.sinh = function () {\r\n      var k, pr, rm, len,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n      Ctor.rounding = 1;\r\n      len = x.d.length;\r\n  \r\n      if (len < 3) {\r\n        x = taylorSeries(Ctor, 2, x, x, true);\r\n      } else {\r\n  \r\n        // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n        // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n        // 3 multiplications and 1 addition\r\n  \r\n        // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n        // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n        // 4 multiplications and 2 additions\r\n  \r\n        // Estimate the optimum number of times to use the argument reduction.\r\n        k = 1.4 * Math.sqrt(len);\r\n        k = k > 16 ? 16 : k | 0;\r\n  \r\n        x = x.times(1 / tinyPow(5, k));\r\n        x = taylorSeries(Ctor, 2, x, x, true);\r\n  \r\n        // Reverse argument reduction\r\n        var sinh2_x,\r\n          d5 = new Ctor(5),\r\n          d16 = new Ctor(16),\r\n          d20 = new Ctor(20);\r\n        for (; k--;) {\r\n          sinh2_x = x.times(x);\r\n          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n        }\r\n      }\r\n  \r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return finalise(x, pr, rm, true);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n     * Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-1, 1]\r\n     *\r\n     * tanh(x) = sinh(x) / cosh(x)\r\n     *\r\n     * tanh(0)         = 0\r\n     * tanh(-0)        = -0\r\n     * tanh(Infinity)  = 1\r\n     * tanh(-Infinity) = -1\r\n     * tanh(NaN)       = NaN\r\n     *\r\n     */\r\n    P.hyperbolicTangent = P.tanh = function () {\r\n      var pr, rm,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.isFinite()) return new Ctor(x.s);\r\n      if (x.isZero()) return new Ctor(x);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + 7;\r\n      Ctor.rounding = 1;\r\n  \r\n      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n     * this Decimal.\r\n     *\r\n     * Domain: [-1, 1]\r\n     * Range: [0, pi]\r\n     *\r\n     * acos(x) = pi/2 - asin(x)\r\n     *\r\n     * acos(0)       = pi/2\r\n     * acos(-0)      = pi/2\r\n     * acos(1)       = 0\r\n     * acos(-1)      = pi\r\n     * acos(1/2)     = pi/3\r\n     * acos(-1/2)    = 2*pi/3\r\n     * acos(|x| > 1) = NaN\r\n     * acos(NaN)     = NaN\r\n     *\r\n     */\r\n    P.inverseCosine = P.acos = function () {\r\n      var halfPi,\r\n        x = this,\r\n        Ctor = x.constructor,\r\n        k = x.abs().cmp(1),\r\n        pr = Ctor.precision,\r\n        rm = Ctor.rounding;\r\n  \r\n      if (k !== -1) {\r\n        return k === 0\r\n          // |x| is 1\r\n          ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n          // |x| > 1 or x is NaN\r\n          : new Ctor(NaN);\r\n      }\r\n  \r\n      if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n  \r\n      // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n  \r\n      Ctor.precision = pr + 6;\r\n      Ctor.rounding = 1;\r\n  \r\n      x = x.asin();\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n  \r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return halfPi.minus(x);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n     * value of this Decimal.\r\n     *\r\n     * Domain: [1, Infinity]\r\n     * Range: [0, Infinity]\r\n     *\r\n     * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n     *\r\n     * acosh(x < 1)     = NaN\r\n     * acosh(NaN)       = NaN\r\n     * acosh(Infinity)  = Infinity\r\n     * acosh(-Infinity) = NaN\r\n     * acosh(0)         = NaN\r\n     * acosh(-0)        = NaN\r\n     * acosh(1)         = 0\r\n     * acosh(-1)        = NaN\r\n     *\r\n     */\r\n    P.inverseHyperbolicCosine = P.acosh = function () {\r\n      var pr, rm,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n      if (!x.isFinite()) return new Ctor(x);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n      Ctor.rounding = 1;\r\n      external = false;\r\n  \r\n      x = x.times(x).minus(1).sqrt().plus(x);\r\n  \r\n      external = true;\r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return x.ln();\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n     * of this Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-Infinity, Infinity]\r\n     *\r\n     * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n     *\r\n     * asinh(NaN)       = NaN\r\n     * asinh(Infinity)  = Infinity\r\n     * asinh(-Infinity) = -Infinity\r\n     * asinh(0)         = 0\r\n     * asinh(-0)        = -0\r\n     *\r\n     */\r\n    P.inverseHyperbolicSine = P.asinh = function () {\r\n      var pr, rm,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n      Ctor.rounding = 1;\r\n      external = false;\r\n  \r\n      x = x.times(x).plus(1).sqrt().plus(x);\r\n  \r\n      external = true;\r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return x.ln();\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n     * value of this Decimal.\r\n     *\r\n     * Domain: [-1, 1]\r\n     * Range: [-Infinity, Infinity]\r\n     *\r\n     * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n     *\r\n     * atanh(|x| > 1)   = NaN\r\n     * atanh(NaN)       = NaN\r\n     * atanh(Infinity)  = NaN\r\n     * atanh(-Infinity) = NaN\r\n     * atanh(0)         = 0\r\n     * atanh(-0)        = -0\r\n     * atanh(1)         = Infinity\r\n     * atanh(-1)        = -Infinity\r\n     *\r\n     */\r\n    P.inverseHyperbolicTangent = P.atanh = function () {\r\n      var pr, rm, wpr, xsd,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.isFinite()) return new Ctor(NaN);\r\n      if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      xsd = x.sd();\r\n  \r\n      if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n  \r\n      Ctor.precision = wpr = xsd - x.e;\r\n  \r\n      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n  \r\n      Ctor.precision = pr + 4;\r\n      Ctor.rounding = 1;\r\n  \r\n      x = x.ln();\r\n  \r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return x.times(0.5);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n     * Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-pi/2, pi/2]\r\n     *\r\n     * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n     *\r\n     * asin(0)       = 0\r\n     * asin(-0)      = -0\r\n     * asin(1/2)     = pi/6\r\n     * asin(-1/2)    = -pi/6\r\n     * asin(1)       = pi/2\r\n     * asin(-1)      = -pi/2\r\n     * asin(|x| > 1) = NaN\r\n     * asin(NaN)     = NaN\r\n     *\r\n     * TODO? Compare performance of Taylor series.\r\n     *\r\n     */\r\n    P.inverseSine = P.asin = function () {\r\n      var halfPi, k,\r\n        pr, rm,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (x.isZero()) return new Ctor(x);\r\n  \r\n      k = x.abs().cmp(1);\r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n  \r\n      if (k !== -1) {\r\n  \r\n        // |x| is 1\r\n        if (k === 0) {\r\n          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n          halfPi.s = x.s;\r\n          return halfPi;\r\n        }\r\n  \r\n        // |x| > 1 or x is NaN\r\n        return new Ctor(NaN);\r\n      }\r\n  \r\n      // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n  \r\n      Ctor.precision = pr + 6;\r\n      Ctor.rounding = 1;\r\n  \r\n      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n  \r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return x.times(2);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n     * of this Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-pi/2, pi/2]\r\n     *\r\n     * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n     *\r\n     * atan(0)         = 0\r\n     * atan(-0)        = -0\r\n     * atan(1)         = pi/4\r\n     * atan(-1)        = -pi/4\r\n     * atan(Infinity)  = pi/2\r\n     * atan(-Infinity) = -pi/2\r\n     * atan(NaN)       = NaN\r\n     *\r\n     */\r\n    P.inverseTangent = P.atan = function () {\r\n      var i, j, k, n, px, t, r, wpr, x2,\r\n        x = this,\r\n        Ctor = x.constructor,\r\n        pr = Ctor.precision,\r\n        rm = Ctor.rounding;\r\n  \r\n      if (!x.isFinite()) {\r\n        if (!x.s) return new Ctor(NaN);\r\n        if (pr + 4 <= PI_PRECISION) {\r\n          r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n          r.s = x.s;\r\n          return r;\r\n        }\r\n      } else if (x.isZero()) {\r\n        return new Ctor(x);\r\n      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n  \r\n      Ctor.precision = wpr = pr + 10;\r\n      Ctor.rounding = 1;\r\n  \r\n      // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n  \r\n      // Argument reduction\r\n      // Ensure |x| < 0.42\r\n      // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n  \r\n      k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n  \r\n      for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n  \r\n      external = false;\r\n  \r\n      j = Math.ceil(wpr / LOG_BASE);\r\n      n = 1;\r\n      x2 = x.times(x);\r\n      r = new Ctor(x);\r\n      px = x;\r\n  \r\n      // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n      for (; i !== -1;) {\r\n        px = px.times(x2);\r\n        t = r.minus(px.div(n += 2));\r\n  \r\n        px = px.times(x2);\r\n        r = t.plus(px.div(n += 2));\r\n  \r\n        if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n      }\r\n  \r\n      if (k) r = r.times(2 << (k - 1));\r\n  \r\n      external = true;\r\n  \r\n      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n     *\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.d;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is an integer, otherwise return false.\r\n     *\r\n     */\r\n    P.isInteger = P.isInt = function () {\r\n      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is NaN, otherwise return false.\r\n     *\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is negative, otherwise return false.\r\n     *\r\n     */\r\n    P.isNegative = P.isNeg = function () {\r\n      return this.s < 0;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is positive, otherwise return false.\r\n     *\r\n     */\r\n    P.isPositive = P.isPos = function () {\r\n      return this.s > 0;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n     *\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.d && this.d[0] === 0;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n     *\r\n     */\r\n    P.lessThan = P.lt = function (y) {\r\n      return this.cmp(y) < 0;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n     *\r\n     */\r\n    P.lessThanOrEqualTo = P.lte = function (y) {\r\n      return this.cmp(y) < 1;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * If no base is specified, return log[10](arg).\r\n     *\r\n     * log[base](arg) = ln(arg) / ln(base)\r\n     *\r\n     * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n     * otherwise:\r\n     *\r\n     * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n     * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n     * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n     *\r\n     * log[-b](a)       = NaN\r\n     * log[0](a)        = NaN\r\n     * log[1](a)        = NaN\r\n     * log[NaN](a)      = NaN\r\n     * log[Infinity](a) = NaN\r\n     * log[b](0)        = -Infinity\r\n     * log[b](-0)       = -Infinity\r\n     * log[b](-a)       = NaN\r\n     * log[b](1)        = 0\r\n     * log[b](Infinity) = Infinity\r\n     * log[b](NaN)      = NaN\r\n     *\r\n     * [base] {number|string|Decimal} The base of the logarithm.\r\n     *\r\n     */\r\n    P.logarithm = P.log = function (base) {\r\n      var isBase10, d, denominator, k, inf, num, sd, r,\r\n        arg = this,\r\n        Ctor = arg.constructor,\r\n        pr = Ctor.precision,\r\n        rm = Ctor.rounding,\r\n        guard = 5;\r\n  \r\n      // Default base is 10.\r\n      if (base == null) {\r\n        base = new Ctor(10);\r\n        isBase10 = true;\r\n      } else {\r\n        base = new Ctor(base);\r\n        d = base.d;\r\n  \r\n        // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n        if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n  \r\n        isBase10 = base.eq(10);\r\n      }\r\n  \r\n      d = arg.d;\r\n  \r\n      // Is arg negative, non-finite, 0 or 1?\r\n      if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n      }\r\n  \r\n      // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n      // integer power of 10.\r\n      if (isBase10) {\r\n        if (d.length > 1) {\r\n          inf = true;\r\n        } else {\r\n          for (k = d[0]; k % 10 === 0;) k /= 10;\r\n          inf = k !== 1;\r\n        }\r\n      }\r\n  \r\n      external = false;\r\n      sd = pr + guard;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n  \r\n      // The result will have 5 rounding digits.\r\n      r = divide(num, denominator, sd, 1);\r\n  \r\n      // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n      // calculate 10 further digits.\r\n      //\r\n      // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n      // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n      // further digits, the last 14 are nines, round up and assume the result is exact.\r\n      // Also assume the result is exact if the last 14 are zero.\r\n      //\r\n      // Example of a result that will be incorrectly rounded:\r\n      // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n      // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n      // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n      // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n      // place is still 2.6.\r\n      if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n  \r\n        do {\r\n          sd += 10;\r\n          num = naturalLogarithm(arg, sd);\r\n          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n          r = divide(num, denominator, sd, 1);\r\n  \r\n          if (!inf) {\r\n  \r\n            // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n              r = finalise(r, pr + 1, 0);\r\n            }\r\n  \r\n            break;\r\n          }\r\n        } while (checkRoundingDigits(r.d, k += 10, rm));\r\n      }\r\n  \r\n      external = true;\r\n  \r\n      return finalise(r, pr, rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n     *\r\n     * arguments {number|string|Decimal}\r\n     *\r\n    P.max = function () {\r\n      Array.prototype.push.call(arguments, this);\r\n      return maxOrMin(this.constructor, arguments, 'lt');\r\n    };\r\n     */\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n     *\r\n     * arguments {number|string|Decimal}\r\n     *\r\n    P.min = function () {\r\n      Array.prototype.push.call(arguments, this);\r\n      return maxOrMin(this.constructor, arguments, 'gt');\r\n    };\r\n     */\r\n  \r\n  \r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.minus = P.sub = function (y) {\r\n      var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      y = new Ctor(y);\r\n  \r\n      // If either is not finite...\r\n      if (!x.d || !y.d) {\r\n  \r\n        // Return NaN if either is NaN.\r\n        if (!x.s || !y.s) y = new Ctor(NaN);\r\n  \r\n        // Return y negated if x is finite and y is ±Infinity.\r\n        else if (x.d) y.s = -y.s;\r\n  \r\n        // Return x if y is finite and x is ±Infinity.\r\n        // Return x if both are ±Infinity with different signs.\r\n        // Return NaN if both are ±Infinity with the same sign.\r\n        else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n  \r\n        return y;\r\n      }\r\n  \r\n      // If signs differ...\r\n      if (x.s != y.s) {\r\n        y.s = -y.s;\r\n        return x.plus(y);\r\n      }\r\n  \r\n      xd = x.d;\r\n      yd = y.d;\r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n  \r\n      // If either is zero...\r\n      if (!xd[0] || !yd[0]) {\r\n  \r\n        // Return y negated if x is zero and y is non-zero.\r\n        if (yd[0]) y.s = -y.s;\r\n  \r\n        // Return x if y is zero and x is non-zero.\r\n        else if (xd[0]) y = new Ctor(x);\r\n  \r\n        // Return zero if both are zero.\r\n        // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n        else return new Ctor(rm === 3 ? -0 : 0);\r\n  \r\n        return external ? finalise(y, pr, rm) : y;\r\n      }\r\n  \r\n      // x and y are finite, non-zero numbers with the same sign.\r\n  \r\n      // Calculate base 1e7 exponents.\r\n      e = mathfloor(y.e / LOG_BASE);\r\n      xe = mathfloor(x.e / LOG_BASE);\r\n  \r\n      xd = xd.slice();\r\n      k = xe - e;\r\n  \r\n      // If base 1e7 exponents differ...\r\n      if (k) {\r\n        xLTy = k < 0;\r\n  \r\n        if (xLTy) {\r\n          d = xd;\r\n          k = -k;\r\n          len = yd.length;\r\n        } else {\r\n          d = yd;\r\n          e = xe;\r\n          len = xd.length;\r\n        }\r\n  \r\n        // Numbers with massively different exponents would result in a very high number of\r\n        // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n        // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n  \r\n        if (k > i) {\r\n          k = i;\r\n          d.length = 1;\r\n        }\r\n  \r\n        // Prepend zeros to equalise exponents.\r\n        d.reverse();\r\n        for (i = k; i--;) d.push(0);\r\n        d.reverse();\r\n  \r\n      // Base 1e7 exponents equal.\r\n      } else {\r\n  \r\n        // Check digits to determine which is the bigger number.\r\n  \r\n        i = xd.length;\r\n        len = yd.length;\r\n        xLTy = i < len;\r\n        if (xLTy) len = i;\r\n  \r\n        for (i = 0; i < len; i++) {\r\n          if (xd[i] != yd[i]) {\r\n            xLTy = xd[i] < yd[i];\r\n            break;\r\n          }\r\n        }\r\n  \r\n        k = 0;\r\n      }\r\n  \r\n      if (xLTy) {\r\n        d = xd;\r\n        xd = yd;\r\n        yd = d;\r\n        y.s = -y.s;\r\n      }\r\n  \r\n      len = xd.length;\r\n  \r\n      // Append zeros to `xd` if shorter.\r\n      // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n      for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n  \r\n      // Subtract yd from xd.\r\n      for (i = yd.length; i > k;) {\r\n  \r\n        if (xd[--i] < yd[i]) {\r\n          for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n          --xd[j];\r\n          xd[i] += BASE;\r\n        }\r\n  \r\n        xd[i] -= yd[i];\r\n      }\r\n  \r\n      // Remove trailing zeros.\r\n      for (; xd[--len] === 0;) xd.pop();\r\n  \r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xd[0] === 0; xd.shift()) --e;\r\n  \r\n      // Zero?\r\n      if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n  \r\n      y.d = xd;\r\n      y.e = getBase10Exponent(xd, e);\r\n  \r\n      return external ? finalise(y, pr, rm) : y;\r\n    };\r\n  \r\n  \r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n     * `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * The result depends on the modulo mode.\r\n     *\r\n     */\r\n    P.modulo = P.mod = function (y) {\r\n      var q,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      y = new Ctor(y);\r\n  \r\n      // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n      if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n  \r\n      // Return x if y is ±Infinity or x is ±0.\r\n      if (!y.d || x.d && !x.d[0]) {\r\n        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n      }\r\n  \r\n      // Prevent rounding of intermediate calculations.\r\n      external = false;\r\n  \r\n      if (Ctor.modulo == 9) {\r\n  \r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // result = x - q * y    where  0 <= result < abs(y)\r\n        q = divide(x, y.abs(), 0, 3, 1);\r\n        q.s *= y.s;\r\n      } else {\r\n        q = divide(x, y, 0, Ctor.modulo, 1);\r\n      }\r\n  \r\n      q = q.times(y);\r\n  \r\n      external = true;\r\n  \r\n      return x.minus(q);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n     * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.naturalExponential = P.exp = function () {\r\n      return naturalExponential(this);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n     * rounded to `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.naturalLogarithm = P.ln = function () {\r\n      return naturalLogarithm(this);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n     * -1.\r\n     *\r\n     */\r\n    P.negated = P.neg = function () {\r\n      var x = new this.constructor(this);\r\n      x.s = -x.s;\r\n      return finalise(x);\r\n    };\r\n  \r\n  \r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.plus = P.add = function (y) {\r\n      var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      y = new Ctor(y);\r\n  \r\n      // If either is not finite...\r\n      if (!x.d || !y.d) {\r\n  \r\n        // Return NaN if either is NaN.\r\n        if (!x.s || !y.s) y = new Ctor(NaN);\r\n  \r\n        // Return x if y is finite and x is ±Infinity.\r\n        // Return x if both are ±Infinity with the same sign.\r\n        // Return NaN if both are ±Infinity with different signs.\r\n        // Return y if x is finite and y is ±Infinity.\r\n        else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n  \r\n        return y;\r\n      }\r\n  \r\n       // If signs differ...\r\n      if (x.s != y.s) {\r\n        y.s = -y.s;\r\n        return x.minus(y);\r\n      }\r\n  \r\n      xd = x.d;\r\n      yd = y.d;\r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n  \r\n      // If either is zero...\r\n      if (!xd[0] || !yd[0]) {\r\n  \r\n        // Return x if y is zero.\r\n        // Return y if y is non-zero.\r\n        if (!yd[0]) y = new Ctor(x);\r\n  \r\n        return external ? finalise(y, pr, rm) : y;\r\n      }\r\n  \r\n      // x and y are finite, non-zero numbers with the same sign.\r\n  \r\n      // Calculate base 1e7 exponents.\r\n      k = mathfloor(x.e / LOG_BASE);\r\n      e = mathfloor(y.e / LOG_BASE);\r\n  \r\n      xd = xd.slice();\r\n      i = k - e;\r\n  \r\n      // If base 1e7 exponents differ...\r\n      if (i) {\r\n  \r\n        if (i < 0) {\r\n          d = xd;\r\n          i = -i;\r\n          len = yd.length;\r\n        } else {\r\n          d = yd;\r\n          e = k;\r\n          len = xd.length;\r\n        }\r\n  \r\n        // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n        k = Math.ceil(pr / LOG_BASE);\r\n        len = k > len ? k + 1 : len + 1;\r\n  \r\n        if (i > len) {\r\n          i = len;\r\n          d.length = 1;\r\n        }\r\n  \r\n        // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n        d.reverse();\r\n        for (; i--;) d.push(0);\r\n        d.reverse();\r\n      }\r\n  \r\n      len = xd.length;\r\n      i = yd.length;\r\n  \r\n      // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n      if (len - i < 0) {\r\n        i = len;\r\n        d = yd;\r\n        yd = xd;\r\n        xd = d;\r\n      }\r\n  \r\n      // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n      for (carry = 0; i;) {\r\n        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n        xd[i] %= BASE;\r\n      }\r\n  \r\n      if (carry) {\r\n        xd.unshift(carry);\r\n        ++e;\r\n      }\r\n  \r\n      // Remove trailing zeros.\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n  \r\n      y.d = xd;\r\n      y.e = getBase10Exponent(xd, e);\r\n  \r\n      return external ? finalise(y, pr, rm) : y;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return the number of significant digits of the value of this Decimal.\r\n     *\r\n     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n     *\r\n     */\r\n    P.precision = P.sd = function (z) {\r\n      var k,\r\n        x = this;\r\n  \r\n      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n  \r\n      if (x.d) {\r\n        k = getPrecision(x.d);\r\n        if (z && x.e + 1 > k) k = x.e + 1;\r\n      } else {\r\n        k = NaN;\r\n      }\r\n  \r\n      return k;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n     * rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.round = function () {\r\n      var x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-1, 1]\r\n     *\r\n     * sin(x) = x - x^3/3! + x^5/5! - ...\r\n     *\r\n     * sin(0)         = 0\r\n     * sin(-0)        = -0\r\n     * sin(Infinity)  = NaN\r\n     * sin(-Infinity) = NaN\r\n     * sin(NaN)       = NaN\r\n     *\r\n     */\r\n    P.sine = P.sin = function () {\r\n      var pr, rm,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.isFinite()) return new Ctor(NaN);\r\n      if (x.isZero()) return new Ctor(x);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n      Ctor.rounding = 1;\r\n  \r\n      x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n  \r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N)  =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I)  =  I\r\n     *  sqrt(0)  =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, sd, r, rep, t,\r\n        x = this,\r\n        d = x.d,\r\n        e = x.e,\r\n        s = x.s,\r\n        Ctor = x.constructor;\r\n  \r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !d || !d[0]) {\r\n        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n      }\r\n  \r\n      external = false;\r\n  \r\n      // Initial estimate.\r\n      s = Math.sqrt(+x);\r\n  \r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = digitsToString(d);\r\n  \r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(n);\r\n        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n  \r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n  \r\n        r = new Ctor(n);\r\n      } else {\r\n        r = new Ctor(s.toString());\r\n      }\r\n  \r\n      sd = (e = Ctor.precision) + 3;\r\n  \r\n      // Newton-Raphson iteration.\r\n      for (;;) {\r\n        t = r;\r\n        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n  \r\n        // TODO? Replace with for-loop and checkRoundingDigits.\r\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n          n = n.slice(sd - 3, sd + 1);\r\n  \r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n          // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n  \r\n            // On the first iteration only, check to see if rounding up gives the exact result as the\r\n            // nines may infinitely repeat.\r\n            if (!rep) {\r\n              finalise(t, e + 1, 0);\r\n  \r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n  \r\n            sd += 4;\r\n            rep = 1;\r\n          } else {\r\n  \r\n            // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n            // If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n  \r\n              // Truncate to the first rounding digit.\r\n              finalise(r, e + 1, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n  \r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      external = true;\r\n  \r\n      return finalise(r, e, Ctor.rounding, m);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-Infinity, Infinity]\r\n     *\r\n     * tan(0)         = 0\r\n     * tan(-0)        = -0\r\n     * tan(Infinity)  = NaN\r\n     * tan(-Infinity) = NaN\r\n     * tan(NaN)       = NaN\r\n     *\r\n     */\r\n    P.tangent = P.tan = function () {\r\n      var pr, rm,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!x.isFinite()) return new Ctor(NaN);\r\n      if (x.isZero()) return new Ctor(x);\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n      Ctor.precision = pr + 10;\r\n      Ctor.rounding = 1;\r\n  \r\n      x = x.sin();\r\n      x.s = 1;\r\n      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n  \r\n      Ctor.precision = pr;\r\n      Ctor.rounding = rm;\r\n  \r\n      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n    };\r\n  \r\n  \r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     */\r\n    P.times = P.mul = function (y) {\r\n      var carry, e, i, k, r, rL, t, xdL, ydL,\r\n        x = this,\r\n        Ctor = x.constructor,\r\n        xd = x.d,\r\n        yd = (y = new Ctor(y)).d;\r\n  \r\n      y.s *= x.s;\r\n  \r\n       // If either is NaN, ±Infinity or ±0...\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n  \r\n        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n  \r\n          // Return NaN if either is NaN.\r\n          // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n          ? NaN\r\n  \r\n          // Return ±Infinity if either is ±Infinity.\r\n          // Return ±0 if either is ±0.\r\n          : !xd || !yd ? y.s / 0 : y.s * 0);\r\n      }\r\n  \r\n      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n      xdL = xd.length;\r\n      ydL = yd.length;\r\n  \r\n      // Ensure xd points to the longer array.\r\n      if (xdL < ydL) {\r\n        r = xd;\r\n        xd = yd;\r\n        yd = r;\r\n        rL = xdL;\r\n        xdL = ydL;\r\n        ydL = rL;\r\n      }\r\n  \r\n      // Initialise the result array with zeros.\r\n      r = [];\r\n      rL = xdL + ydL;\r\n      for (i = rL; i--;) r.push(0);\r\n  \r\n      // Multiply!\r\n      for (i = ydL; --i >= 0;) {\r\n        carry = 0;\r\n        for (k = xdL + i; k > i;) {\r\n          t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n          r[k--] = t % BASE | 0;\r\n          carry = t / BASE | 0;\r\n        }\r\n  \r\n        r[k] = (r[k] + carry) % BASE | 0;\r\n      }\r\n  \r\n      // Remove trailing zeros.\r\n      for (; !r[--rL];) r.pop();\r\n  \r\n      if (carry) ++e;\r\n      else r.shift();\r\n  \r\n      y.d = r;\r\n      y.e = getBase10Exponent(r, e);\r\n  \r\n      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n     * digits using rounding mode `rm`.\r\n     *\r\n     * If the optional `sd` argument is present then return binary exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     */\r\n    P.toBinary = function (sd, rm) {\r\n      return toStringBinary(this, 2, sd, rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n     *\r\n     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     */\r\n    P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n      var x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      x = new Ctor(x);\r\n      if (dp === void 0) return x;\r\n  \r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n  \r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n  \r\n      return finalise(x, dp + x.e + 1, rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal in exponential notation rounded to\r\n     * `dp` fixed decimal places using rounding mode `rounding`.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      var str,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (dp === void 0) {\r\n        str = finiteToString(x, true);\r\n      } else {\r\n        checkInt32(dp, 0, MAX_DIGITS);\r\n  \r\n        if (rm === void 0) rm = Ctor.rounding;\r\n        else checkInt32(rm, 0, 8);\r\n  \r\n        x = finalise(new Ctor(x), dp + 1, rm);\r\n        str = finiteToString(x, true, dp + 1);\r\n      }\r\n  \r\n      return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n     * omitted.\r\n     *\r\n     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n     * (-0).toFixed(3) is '0.000'.\r\n     * (-0.5).toFixed(0) is '-0'.\r\n     *\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      var str, y,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (dp === void 0) {\r\n        str = finiteToString(x);\r\n      } else {\r\n        checkInt32(dp, 0, MAX_DIGITS);\r\n  \r\n        if (rm === void 0) rm = Ctor.rounding;\r\n        else checkInt32(rm, 0, 8);\r\n  \r\n        y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n        str = finiteToString(y, false, dp + y.e + 1);\r\n      }\r\n  \r\n      // To determine whether to add the minus sign look at the value before it was rounded,\r\n      // i.e. look at `x` rather than `y`.\r\n      return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n     * numerator and an integer denominator.\r\n     *\r\n     * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n     * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n     * value necessary to represent the number exactly.\r\n     *\r\n     * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n     *\r\n     */\r\n    P.toFraction = function (maxD) {\r\n      var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n        x = this,\r\n        xd = x.d,\r\n        Ctor = x.constructor;\r\n  \r\n      if (!xd) return new Ctor(x);\r\n  \r\n      n1 = d0 = new Ctor(1);\r\n      d1 = n0 = new Ctor(0);\r\n  \r\n      d = new Ctor(d1);\r\n      e = d.e = getPrecision(xd) - x.e - 1;\r\n      k = e % LOG_BASE;\r\n      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n  \r\n      if (maxD == null) {\r\n  \r\n        // d is 10**e, the minimum max-denominator needed.\r\n        maxD = e > 0 ? d : n1;\r\n      } else {\r\n        n = new Ctor(maxD);\r\n        if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n      }\r\n  \r\n      external = false;\r\n      n = new Ctor(digitsToString(xd));\r\n      pr = Ctor.precision;\r\n      Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n  \r\n      for (;;)  {\r\n        q = divide(n, d, 0, 1, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.cmp(maxD) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        d2 = n1;\r\n        n1 = n0.plus(q.times(d2));\r\n        n0 = d2;\r\n        d2 = d;\r\n        d = n.minus(q.times(d2));\r\n        n = d2;\r\n      }\r\n  \r\n      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n  \r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n          ? [n1, d1] : [n0, d0];\r\n  \r\n      Ctor.precision = pr;\r\n      external = true;\r\n  \r\n      return r;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n     * digits using rounding mode `rm`.\r\n     *\r\n     * If the optional `sd` argument is present then return binary exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     */\r\n    P.toHexadecimal = P.toHex = function (sd, rm) {\r\n      return toStringBinary(this, 16, sd, rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n     * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n     *\r\n     * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n     * or `y` is NaN, in which case the return value will be also be NaN.\r\n     *\r\n     * The return value is not affected by the value of `precision`.\r\n     *\r\n     * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toNearest() rounding mode not an integer: {rm}'\r\n     * 'toNearest() rounding mode out of range: {rm}'\r\n     *\r\n     */\r\n    P.toNearest = function (y, rm) {\r\n      var x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      x = new Ctor(x);\r\n  \r\n      if (y == null) {\r\n  \r\n        // If x is not finite, return x.\r\n        if (!x.d) return x;\r\n  \r\n        y = new Ctor(1);\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        y = new Ctor(y);\r\n        if (rm === void 0) {\r\n          rm = Ctor.rounding;\r\n        } else {\r\n          checkInt32(rm, 0, 8);\r\n        }\r\n  \r\n        // If x is not finite, return x if y is not NaN, else NaN.\r\n        if (!x.d) return y.s ? x : y;\r\n  \r\n        // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n        if (!y.d) {\r\n          if (y.s) y.s = x.s;\r\n          return y;\r\n        }\r\n      }\r\n  \r\n      // If y is not zero, calculate the nearest multiple of y to x.\r\n      if (y.d[0]) {\r\n        external = false;\r\n        x = divide(x, y, 0, rm, 1).times(y);\r\n        external = true;\r\n        finalise(x);\r\n  \r\n      // If y is zero, return zero with the sign of x.\r\n      } else {\r\n        y.s = x.s;\r\n        x = y;\r\n      }\r\n  \r\n      return x;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return the value of this Decimal converted to a number primitive.\r\n     * Zero keeps its sign.\r\n     *\r\n     */\r\n    P.toNumber = function () {\r\n      return +this;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n     * digits using rounding mode `rm`.\r\n     *\r\n     * If the optional `sd` argument is present then return binary exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     */\r\n    P.toOctal = function (sd, rm) {\r\n      return toStringBinary(this, 8, sd, rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n     * to `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * ECMAScript compliant.\r\n     *\r\n     *   pow(x, NaN)                           = NaN\r\n     *   pow(x, ±0)                            = 1\r\n  \r\n     *   pow(NaN, non-zero)                    = NaN\r\n     *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n     *   pow(abs(x) > 1, -Infinity)            = +0\r\n     *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n     *   pow(abs(x) < 1, +Infinity)            = +0\r\n     *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n     *   pow(+Infinity, y > 0)                 = +Infinity\r\n     *   pow(+Infinity, y < 0)                 = +0\r\n     *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n     *   pow(-Infinity, even integer > 0)      = +Infinity\r\n     *   pow(-Infinity, odd integer < 0)       = -0\r\n     *   pow(-Infinity, even integer < 0)      = +0\r\n     *   pow(+0, y > 0)                        = +0\r\n     *   pow(+0, y < 0)                        = +Infinity\r\n     *   pow(-0, odd integer > 0)              = -0\r\n     *   pow(-0, even integer > 0)             = +0\r\n     *   pow(-0, odd integer < 0)              = -Infinity\r\n     *   pow(-0, even integer < 0)             = +Infinity\r\n     *   pow(finite x < 0, finite non-integer) = NaN\r\n     *\r\n     * For non-integer or very large exponents pow(x, y) is calculated using\r\n     *\r\n     *   x^y = exp(y*ln(x))\r\n     *\r\n     * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n     * probability of an incorrectly rounded result\r\n     * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n     * i.e. 1 in 250,000,000,000,000\r\n     *\r\n     * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n     *\r\n     * y {number|string|Decimal} The power to which to raise this Decimal.\r\n     *\r\n     */\r\n    P.toPower = P.pow = function (y) {\r\n      var e, k, pr, r, rm, s,\r\n        x = this,\r\n        Ctor = x.constructor,\r\n        yn = +(y = new Ctor(y));\r\n  \r\n      // Either ±Infinity, NaN or ±0?\r\n      if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n  \r\n      x = new Ctor(x);\r\n  \r\n      if (x.eq(1)) return x;\r\n  \r\n      pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n  \r\n      if (y.eq(1)) return finalise(x, pr, rm);\r\n  \r\n      // y exponent\r\n      e = mathfloor(y.e / LOG_BASE);\r\n  \r\n      // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n      if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n        r = intPow(Ctor, x, k, pr);\r\n        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n      }\r\n  \r\n      s = x.s;\r\n  \r\n      // if x is negative\r\n      if (s < 0) {\r\n  \r\n        // if y is not an integer\r\n        if (e < y.d.length - 1) return new Ctor(NaN);\r\n  \r\n        // Result is positive if x is negative and the last digit of integer y is even.\r\n        if ((y.d[e] & 1) == 0) s = 1;\r\n  \r\n        // if x.eq(-1)\r\n        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n          x.s = s;\r\n          return x;\r\n        }\r\n      }\r\n  \r\n      // Estimate result exponent.\r\n      // x^y = 10^e,  where e = y * log10(x)\r\n      // log10(x) = log10(x_significand) + x_exponent\r\n      // log10(x_significand) = ln(x_significand) / ln(10)\r\n      k = mathpow(+x, yn);\r\n      e = k == 0 || !isFinite(k)\r\n        ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n        : new Ctor(k + '').e;\r\n  \r\n      // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n  \r\n      // Overflow/underflow?\r\n      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n  \r\n      external = false;\r\n      Ctor.rounding = x.s = 1;\r\n  \r\n      // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n      // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n      // new Decimal(2.32456).pow('2087987436534566.46411')\r\n      // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n      k = Math.min(12, (e + '').length);\r\n  \r\n      // r = x^y = exp(y*ln(x))\r\n      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n  \r\n      // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n      if (r.d) {\r\n  \r\n        // Truncate to the required precision plus five rounding digits.\r\n        r = finalise(r, pr + 5, 1);\r\n  \r\n        // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n        // the result.\r\n        if (checkRoundingDigits(r.d, pr, rm)) {\r\n          e = pr + 10;\r\n  \r\n          // Truncate to the increased precision plus five rounding digits.\r\n          r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n  \r\n          // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n          if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n        }\r\n      }\r\n  \r\n      r.s = s;\r\n      external = true;\r\n      Ctor.rounding = rm;\r\n  \r\n      return finalise(r, pr, rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n     * using rounding mode `rounding`.\r\n     *\r\n     * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n     * the integer part of the value in normal notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      var str,\r\n        x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (sd === void 0) {\r\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n      } else {\r\n        checkInt32(sd, 1, MAX_DIGITS);\r\n  \r\n        if (rm === void 0) rm = Ctor.rounding;\r\n        else checkInt32(rm, 0, 8);\r\n  \r\n        x = finalise(new Ctor(x), sd, rm);\r\n        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n      }\r\n  \r\n      return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n     * omitted.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * 'toSD() digits out of range: {sd}'\r\n     * 'toSD() digits not an integer: {sd}'\r\n     * 'toSD() rounding mode not an integer: {rm}'\r\n     * 'toSD() rounding mode out of range: {rm}'\r\n     *\r\n     */\r\n    P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n      var x = this,\r\n        Ctor = x.constructor;\r\n  \r\n      if (sd === void 0) {\r\n        sd = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(sd, 1, MAX_DIGITS);\r\n  \r\n        if (rm === void 0) rm = Ctor.rounding;\r\n        else checkInt32(rm, 0, 8);\r\n      }\r\n  \r\n      return finalise(new Ctor(x), sd, rm);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal.\r\n     *\r\n     * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n     *\r\n     */\r\n    P.toString = function () {\r\n      var x = this,\r\n        Ctor = x.constructor,\r\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  \r\n      return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n     *\r\n     */\r\n    P.truncated = P.trunc = function () {\r\n      return finalise(new this.constructor(this), this.e + 1, 1);\r\n    };\r\n  \r\n  \r\n    /*\r\n     * Return a string representing the value of this Decimal.\r\n     * Unlike `toString`, negative zero will include the minus sign.\r\n     *\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      var x = this,\r\n        Ctor = x.constructor,\r\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  \r\n      return x.isNeg() ? '-' + str : str;\r\n    };\r\n  \r\n  \r\n    // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n  \r\n  \r\n    /*\r\n     *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n     *                           finiteToString, naturalExponential, naturalLogarithm\r\n     *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n     *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n     *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n     *  convertBase              toStringBinary, parseOther\r\n     *  cos                      P.cos\r\n     *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n     *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n     *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n     *                           taylorSeries, atan2, parseOther\r\n     *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n     *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n     *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n     *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n     *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n     *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n     *                           naturalLogarithm, ceil, floor, round, trunc\r\n     *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n     *                           toStringBinary\r\n     *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n     *  getLn10                  P.logarithm, naturalLogarithm\r\n     *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n     *  getPrecision             P.precision, P.toFraction\r\n     *  getZeroString            digitsToString, finiteToString\r\n     *  intPow                   P.toPower, parseOther\r\n     *  isOdd                    toLessThanHalfPi\r\n     *  maxOrMin                 max, min\r\n     *  naturalExponential       P.naturalExponential, P.toPower\r\n     *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n     *                           P.toPower, naturalExponential\r\n     *  nonFiniteToString        finiteToString, toStringBinary\r\n     *  parseDecimal             Decimal\r\n     *  parseOther               Decimal\r\n     *  sin                      P.sin\r\n     *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n     *  toLessThanHalfPi         P.cos, P.sin\r\n     *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n     *  truncate                 intPow\r\n     *\r\n     *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n     *                           naturalLogarithm, config, parseOther, random, Decimal\r\n     */\r\n  \r\n  \r\n    function digitsToString(d) {\r\n      var i, k, ws,\r\n        indexOfLastWord = d.length - 1,\r\n        str = '',\r\n        w = d[0];\r\n  \r\n      if (indexOfLastWord > 0) {\r\n        str += w;\r\n        for (i = 1; i < indexOfLastWord; i++) {\r\n          ws = d[i] + '';\r\n          k = LOG_BASE - ws.length;\r\n          if (k) str += getZeroString(k);\r\n          str += ws;\r\n        }\r\n  \r\n        w = d[i];\r\n        ws = w + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n      } else if (w === 0) {\r\n        return '0';\r\n      }\r\n  \r\n      // Remove trailing zeros of last w.\r\n      for (; w % 10 === 0;) w /= 10;\r\n  \r\n      return str + w;\r\n    }\r\n  \r\n  \r\n    function checkInt32(i, min, max) {\r\n      if (i !== ~~i || i < min || i > max) {\r\n        throw Error(invalidArgument + i);\r\n      }\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n     * `repeating == null` if caller is `log` or `pow`,\r\n     * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n     */\r\n    function checkRoundingDigits(d, i, rm, repeating) {\r\n      var di, k, r, rd;\r\n  \r\n      // Get the length of the first word of the array d.\r\n      for (k = d[0]; k >= 10; k /= 10) --i;\r\n  \r\n      // Is the rounding digit in the first word of d?\r\n      if (--i < 0) {\r\n        i += LOG_BASE;\r\n        di = 0;\r\n      } else {\r\n        di = Math.ceil((i + 1) / LOG_BASE);\r\n        i %= LOG_BASE;\r\n      }\r\n  \r\n      // i is the index (0 - 6) of the rounding digit.\r\n      // E.g. if within the word 3487563 the first rounding digit is 5,\r\n      // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n      k = mathpow(10, LOG_BASE - i);\r\n      rd = d[di] % k | 0;\r\n  \r\n      if (repeating == null) {\r\n        if (i < 3) {\r\n          if (i == 0) rd = rd / 100 | 0;\r\n          else if (i == 1) rd = rd / 10 | 0;\r\n          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n        } else {\r\n          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n            (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n              (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n        }\r\n      } else {\r\n        if (i < 4) {\r\n          if (i == 0) rd = rd / 1000 | 0;\r\n          else if (i == 1) rd = rd / 100 | 0;\r\n          else if (i == 2) rd = rd / 10 | 0;\r\n          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n        } else {\r\n          r = ((repeating || rm < 4) && rd + 1 == k ||\r\n          (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n            (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n        }\r\n      }\r\n  \r\n      return r;\r\n    }\r\n  \r\n  \r\n    // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n    // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n    // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n    function convertBase(str, baseIn, baseOut) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        strL = str.length;\r\n  \r\n      for (; i < strL;) {\r\n        for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n        arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n        for (j = 0; j < arr.length; j++) {\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n  \r\n      return arr.reverse();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n     * |x| < pi/2\r\n     *\r\n     */\r\n    function cosine(Ctor, x) {\r\n      var k, len, y;\r\n  \r\n      if (x.isZero()) return x;\r\n  \r\n      // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n      // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n  \r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      len = x.d.length;\r\n      if (len < 32) {\r\n        k = Math.ceil(len / 3);\r\n        y = (1 / tinyPow(4, k)).toString();\r\n      } else {\r\n        k = 16;\r\n        y = '2.3283064365386962890625e-10';\r\n      }\r\n  \r\n      Ctor.precision += k;\r\n  \r\n      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n  \r\n      // Reverse argument reduction\r\n      for (var i = k; i--;) {\r\n        var cos2x = x.times(x);\r\n        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n      }\r\n  \r\n      Ctor.precision -= k;\r\n  \r\n      return x;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Perform division in the specified base.\r\n     */\r\n    var divide = (function () {\r\n  \r\n      // Assumes non-zero x and k, and hence non-zero result.\r\n      function multiplyInteger(x, k, base) {\r\n        var temp,\r\n          carry = 0,\r\n          i = x.length;\r\n  \r\n        for (x = x.slice(); i--;) {\r\n          temp = x[i] * k + carry;\r\n          x[i] = temp % base | 0;\r\n          carry = temp / base | 0;\r\n        }\r\n  \r\n        if (carry) x.unshift(carry);\r\n  \r\n        return x;\r\n      }\r\n  \r\n      function compare(a, b, aL, bL) {\r\n        var i, r;\r\n  \r\n        if (aL != bL) {\r\n          r = aL > bL ? 1 : -1;\r\n        } else {\r\n          for (i = r = 0; i < aL; i++) {\r\n            if (a[i] != b[i]) {\r\n              r = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  \r\n        return r;\r\n      }\r\n  \r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n  \r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n  \r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1;) a.shift();\r\n      }\r\n  \r\n      return function (x, y, pr, rm, dp, base) {\r\n        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n          yL, yz,\r\n          Ctor = x.constructor,\r\n          sign = x.s == y.s ? 1 : -1,\r\n          xd = x.d,\r\n          yd = y.d;\r\n  \r\n        // Either NaN, Infinity or 0?\r\n        if (!xd || !xd[0] || !yd || !yd[0]) {\r\n  \r\n          return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n            !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n  \r\n            // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n            xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n        }\r\n  \r\n        if (base) {\r\n          logBase = 1;\r\n          e = x.e - y.e;\r\n        } else {\r\n          base = BASE;\r\n          logBase = LOG_BASE;\r\n          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n        }\r\n  \r\n        yL = yd.length;\r\n        xL = xd.length;\r\n        q = new Ctor(sign);\r\n        qd = q.d = [];\r\n  \r\n        // Result exponent may be one less than e.\r\n        // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n        for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n  \r\n        if (yd[i] > (xd[i] || 0)) e--;\r\n  \r\n        if (pr == null) {\r\n          sd = pr = Ctor.precision;\r\n          rm = Ctor.rounding;\r\n        } else if (dp) {\r\n          sd = pr + (x.e - y.e) + 1;\r\n        } else {\r\n          sd = pr;\r\n        }\r\n  \r\n        if (sd < 0) {\r\n          qd.push(1);\r\n          more = true;\r\n        } else {\r\n  \r\n          // Convert precision in number of base 10 digits to base 1e7 digits.\r\n          sd = sd / logBase + 2 | 0;\r\n          i = 0;\r\n  \r\n          // divisor < 1e7\r\n          if (yL == 1) {\r\n            k = 0;\r\n            yd = yd[0];\r\n            sd++;\r\n  \r\n            // k is the carry.\r\n            for (; (i < xL || k) && sd--; i++) {\r\n              t = k * base + (xd[i] || 0);\r\n              qd[i] = t / yd | 0;\r\n              k = t % yd | 0;\r\n            }\r\n  \r\n            more = k || i < xL;\r\n  \r\n          // divisor >= 1e7\r\n          } else {\r\n  \r\n            // Normalise xd and yd so highest order digit of yd is >= base/2\r\n            k = base / (yd[0] + 1) | 0;\r\n  \r\n            if (k > 1) {\r\n              yd = multiplyInteger(yd, k, base);\r\n              xd = multiplyInteger(xd, k, base);\r\n              yL = yd.length;\r\n              xL = xd.length;\r\n            }\r\n  \r\n            xi = yL;\r\n            rem = xd.slice(0, yL);\r\n            remL = rem.length;\r\n  \r\n            // Add zeros to make remainder as long as divisor.\r\n            for (; remL < yL;) rem[remL++] = 0;\r\n  \r\n            yz = yd.slice();\r\n            yz.unshift(0);\r\n            yd0 = yd[0];\r\n  \r\n            if (yd[1] >= base / 2) ++yd0;\r\n  \r\n            do {\r\n              k = 0;\r\n  \r\n              // Compare divisor and remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n  \r\n              // If divisor < remainder.\r\n              if (cmp < 0) {\r\n  \r\n                // Calculate trial digit, k.\r\n                rem0 = rem[0];\r\n                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n  \r\n                // k will be how many times the divisor goes into the current remainder.\r\n                k = rem0 / yd0 | 0;\r\n  \r\n                //  Algorithm:\r\n                //  1. product = divisor * trial digit (k)\r\n                //  2. if product > remainder: product -= divisor, k--\r\n                //  3. remainder -= product\r\n                //  4. if product was < remainder at 2:\r\n                //    5. compare new remainder and divisor\r\n                //    6. If remainder > divisor: remainder -= divisor, k++\r\n  \r\n                if (k > 1) {\r\n                  if (k >= base) k = base - 1;\r\n  \r\n                  // product = divisor * trial digit.\r\n                  prod = multiplyInteger(yd, k, base);\r\n                  prodL = prod.length;\r\n                  remL = rem.length;\r\n  \r\n                  // Compare product and remainder.\r\n                  cmp = compare(prod, rem, prodL, remL);\r\n  \r\n                  // product > remainder.\r\n                  if (cmp == 1) {\r\n                    k--;\r\n  \r\n                    // Subtract divisor from product.\r\n                    subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                  }\r\n                } else {\r\n  \r\n                  // cmp is -1.\r\n                  // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                  // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                  if (k == 0) cmp = k = 1;\r\n                  prod = yd.slice();\r\n                }\r\n  \r\n                prodL = prod.length;\r\n                if (prodL < remL) prod.unshift(0);\r\n  \r\n                // Subtract product from remainder.\r\n                subtract(rem, prod, remL, base);\r\n  \r\n                // If product was < previous remainder.\r\n                if (cmp == -1) {\r\n                  remL = rem.length;\r\n  \r\n                  // Compare divisor and new remainder.\r\n                  cmp = compare(yd, rem, yL, remL);\r\n  \r\n                  // If divisor < new remainder, subtract divisor from remainder.\r\n                  if (cmp < 1) {\r\n                    k++;\r\n  \r\n                    // Subtract divisor from remainder.\r\n                    subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                  }\r\n                }\r\n  \r\n                remL = rem.length;\r\n              } else if (cmp === 0) {\r\n                k++;\r\n                rem = [0];\r\n              }    // if cmp === 1, k will be 0\r\n  \r\n              // Add the next digit, k, to the result array.\r\n              qd[i++] = k;\r\n  \r\n              // Update the remainder.\r\n              if (cmp && rem[0]) {\r\n                rem[remL++] = xd[xi] || 0;\r\n              } else {\r\n                rem = [xd[xi]];\r\n                remL = 1;\r\n              }\r\n  \r\n            } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n  \r\n            more = rem[0] !== void 0;\r\n          }\r\n  \r\n          // Leading zero?\r\n          if (!qd[0]) qd.shift();\r\n        }\r\n  \r\n        // logBase is 1 when divide is being used for base conversion.\r\n        if (logBase == 1) {\r\n          q.e = e;\r\n          inexact = more;\r\n        } else {\r\n  \r\n          // To calculate q.e, first get the number of digits of qd[0].\r\n          for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n          q.e = i + e * logBase - 1;\r\n  \r\n          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n        }\r\n  \r\n        return q;\r\n      };\r\n    })();\r\n  \r\n  \r\n    /*\r\n     * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n     * Check for over/under-flow.\r\n     */\r\n     function finalise(x, sd, rm, isTruncated) {\r\n      var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n        Ctor = x.constructor;\r\n  \r\n      // Don't round if sd is null or undefined.\r\n      out: if (sd != null) {\r\n        xd = x.d;\r\n  \r\n        // Infinity/NaN.\r\n        if (!xd) return x;\r\n  \r\n        // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // w: the word of xd containing rd, a base 1e7 number.\r\n        // xdi: the index of w within xd.\r\n        // digits: the number of digits of w.\r\n        // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n        // they had leading zeros)\r\n        // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n  \r\n        // Get the length of the first word of the digits array xd.\r\n        for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n        i = sd - digits;\r\n  \r\n        // Is the rounding digit in the first word of xd?\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          w = xd[xdi = 0];\r\n  \r\n          // Get the rounding digit at index j of w.\r\n          rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        } else {\r\n          xdi = Math.ceil((i + 1) / LOG_BASE);\r\n          k = xd.length;\r\n          if (xdi >= k) {\r\n            if (isTruncated) {\r\n  \r\n              // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n              for (; k++ <= xdi;) xd.push(0);\r\n              w = rd = 0;\r\n              digits = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            w = k = xd[xdi];\r\n  \r\n            // Get the number of digits of w.\r\n            for (digits = 1; k >= 10; k /= 10) digits++;\r\n  \r\n            // Get the index of rd within w.\r\n            i %= LOG_BASE;\r\n  \r\n            // Get the index of rd within w, adjusted for leading zeros.\r\n            // The number of leading zeros of w is given by LOG_BASE - digits.\r\n            j = i - LOG_BASE + digits;\r\n  \r\n            // Get the rounding digit at index j of w.\r\n            rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n          }\r\n        }\r\n  \r\n        // Are there any non-zero digits after the rounding digit?\r\n        isTruncated = isTruncated || sd < 0 ||\r\n          xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n  \r\n        // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n        // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n        // will give 714.\r\n  \r\n        roundUp = rm < 4\r\n          ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n          : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n  \r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n              rm == (x.s < 0 ? 8 : 7));\r\n  \r\n        if (sd < 1 || !xd[0]) {\r\n          xd.length = 0;\r\n          if (roundUp) {\r\n  \r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n  \r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n            x.e = -sd || 0;\r\n          } else {\r\n  \r\n            // Zero.\r\n            xd[0] = x.e = 0;\r\n          }\r\n  \r\n          return x;\r\n        }\r\n  \r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xd.length = xdi;\r\n          k = 1;\r\n          xdi--;\r\n        } else {\r\n          xd.length = xdi + 1;\r\n          k = mathpow(10, LOG_BASE - i);\r\n  \r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of w.\r\n          xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n        }\r\n  \r\n        if (roundUp) {\r\n          for (;;) {\r\n  \r\n            // Is the digit to be rounded up in the first word of xd?\r\n            if (xdi == 0) {\r\n  \r\n              // i will be the length of xd[0] before k is added.\r\n              for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n              j = xd[0] += k;\r\n              for (k = 1; j >= 10; j /= 10) k++;\r\n  \r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xd[0] == BASE) xd[0] = 1;\r\n              }\r\n  \r\n              break;\r\n            } else {\r\n              xd[xdi] += k;\r\n              if (xd[xdi] != BASE) break;\r\n              xd[xdi--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Remove trailing zeros.\r\n        for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n      }\r\n  \r\n      if (external) {\r\n  \r\n        // Overflow?\r\n        if (x.e > Ctor.maxE) {\r\n  \r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n  \r\n        // Underflow?\r\n        } else if (x.e < Ctor.minE) {\r\n  \r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // Ctor.underflow = true;\r\n        } // else Ctor.underflow = false;\r\n      }\r\n  \r\n      return x;\r\n    }\r\n  \r\n  \r\n    function finiteToString(x, isExp, sd) {\r\n      if (!x.isFinite()) return nonFiniteToString(x);\r\n      var k,\r\n        e = x.e,\r\n        str = digitsToString(x.d),\r\n        len = str.length;\r\n  \r\n      if (isExp) {\r\n        if (sd && (k = sd - len) > 0) {\r\n          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n        } else if (len > 1) {\r\n          str = str.charAt(0) + '.' + str.slice(1);\r\n        }\r\n  \r\n        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n      } else if (e < 0) {\r\n        str = '0.' + getZeroString(-e - 1) + str;\r\n        if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n      } else if (e >= len) {\r\n        str += getZeroString(e + 1 - len);\r\n        if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n      } else {\r\n        if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n        if (sd && (k = sd - len) > 0) {\r\n          if (e + 1 === len) str += '.';\r\n          str += getZeroString(k);\r\n        }\r\n      }\r\n  \r\n      return str;\r\n    }\r\n  \r\n  \r\n    // Calculate the base 10 exponent from the base 1e7 exponent.\r\n    function getBase10Exponent(digits, e) {\r\n      var w = digits[0];\r\n  \r\n      // Add the number of digits of the first word of the digits array.\r\n      for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n      return e;\r\n    }\r\n  \r\n  \r\n    function getLn10(Ctor, sd, pr) {\r\n      if (sd > LN10_PRECISION) {\r\n  \r\n        // Reset global state in case the exception is caught.\r\n        external = true;\r\n        if (pr) Ctor.precision = pr;\r\n        throw Error(precisionLimitExceeded);\r\n      }\r\n      return finalise(new Ctor(LN10), sd, 1, true);\r\n    }\r\n  \r\n  \r\n    function getPi(Ctor, sd, rm) {\r\n      if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n      return finalise(new Ctor(PI), sd, rm, true);\r\n    }\r\n  \r\n  \r\n    function getPrecision(digits) {\r\n      var w = digits.length - 1,\r\n        len = w * LOG_BASE + 1;\r\n  \r\n      w = digits[w];\r\n  \r\n      // If non-zero...\r\n      if (w) {\r\n  \r\n        // Subtract the number of trailing zeros of the last word.\r\n        for (; w % 10 == 0; w /= 10) len--;\r\n  \r\n        // Add the number of digits of the first word.\r\n        for (w = digits[0]; w >= 10; w /= 10) len++;\r\n      }\r\n  \r\n      return len;\r\n    }\r\n  \r\n  \r\n    function getZeroString(k) {\r\n      var zs = '';\r\n      for (; k--;) zs += '0';\r\n      return zs;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n     * integer of type number.\r\n     *\r\n     * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n     *\r\n     */\r\n    function intPow(Ctor, x, n, pr) {\r\n      var isTruncated,\r\n        r = new Ctor(1),\r\n  \r\n        // Max n of 9007199254740991 takes 53 loop iterations.\r\n        // Maximum digits array length; leaves [28, 34] guard digits.\r\n        k = Math.ceil(pr / LOG_BASE + 4);\r\n  \r\n      external = false;\r\n  \r\n      for (;;) {\r\n        if (n % 2) {\r\n          r = r.times(x);\r\n          if (truncate(r.d, k)) isTruncated = true;\r\n        }\r\n  \r\n        n = mathfloor(n / 2);\r\n        if (n === 0) {\r\n  \r\n          // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n          n = r.d.length - 1;\r\n          if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n          break;\r\n        }\r\n  \r\n        x = x.times(x);\r\n        truncate(x.d, k);\r\n      }\r\n  \r\n      external = true;\r\n  \r\n      return r;\r\n    }\r\n  \r\n  \r\n    function isOdd(n) {\r\n      return n.d[n.d.length - 1] & 1;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n     */\r\n    function maxOrMin(Ctor, args, ltgt) {\r\n      var y,\r\n        x = new Ctor(args[0]),\r\n        i = 0;\r\n  \r\n      for (; ++i < args.length;) {\r\n        y = new Ctor(args[i]);\r\n        if (!y.s) {\r\n          x = y;\r\n          break;\r\n        } else if (x[ltgt](y)) {\r\n          x = y;\r\n        }\r\n      }\r\n  \r\n      return x;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n     * digits.\r\n     *\r\n     * Taylor/Maclaurin series.\r\n     *\r\n     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n     *\r\n     * Argument reduction:\r\n     *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n     *   exp(x) = exp(x / 2^k)^(2^k)\r\n     *\r\n     * Previously, the argument was initially reduced by\r\n     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n     * found to be slower than just dividing repeatedly by 32 as above.\r\n     *\r\n     * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n     * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n     *\r\n     *  exp(Infinity)  = Infinity\r\n     *  exp(-Infinity) = 0\r\n     *  exp(NaN)       = NaN\r\n     *  exp(±0)        = 1\r\n     *\r\n     *  exp(x) is non-terminating for any finite, non-zero x.\r\n     *\r\n     *  The result will always be correctly rounded.\r\n     *\r\n     */\r\n    function naturalExponential(x, sd) {\r\n      var denominator, guard, j, pow, sum, t, wpr,\r\n        rep = 0,\r\n        i = 0,\r\n        k = 0,\r\n        Ctor = x.constructor,\r\n        rm = Ctor.rounding,\r\n        pr = Ctor.precision;\r\n  \r\n      // 0/NaN/Infinity?\r\n      if (!x.d || !x.d[0] || x.e > 17) {\r\n  \r\n        return new Ctor(x.d\r\n          ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n          : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n      }\r\n  \r\n      if (sd == null) {\r\n        external = false;\r\n        wpr = pr;\r\n      } else {\r\n        wpr = sd;\r\n      }\r\n  \r\n      t = new Ctor(0.03125);\r\n  \r\n      // while abs(x) >= 0.1\r\n      while (x.e > -2) {\r\n  \r\n        // x = x / 2^5\r\n        x = x.times(t);\r\n        k += 5;\r\n      }\r\n  \r\n      // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n      // necessary to ensure the first 4 rounding digits are correct.\r\n      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n      wpr += guard;\r\n      denominator = pow = sum = new Ctor(1);\r\n      Ctor.precision = wpr;\r\n  \r\n      for (;;) {\r\n        pow = finalise(pow.times(x), wpr, 1);\r\n        denominator = denominator.times(++i);\r\n        t = sum.plus(divide(pow, denominator, wpr, 1));\r\n  \r\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n          j = k;\r\n          while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n  \r\n          // Check to see if the first 4 rounding digits are [49]999.\r\n          // If so, repeat the summation with a higher precision, otherwise\r\n          // e.g. with precision: 18, rounding: 1\r\n          // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n          // `wpr - guard` is the index of first rounding digit.\r\n          if (sd == null) {\r\n  \r\n            if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n              Ctor.precision = wpr += 10;\r\n              denominator = pow = t = new Ctor(1);\r\n              i = 0;\r\n              rep++;\r\n            } else {\r\n              return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n            }\r\n          } else {\r\n            Ctor.precision = pr;\r\n            return sum;\r\n          }\r\n        }\r\n  \r\n        sum = t;\r\n      }\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n     * digits.\r\n     *\r\n     *  ln(-n)        = NaN\r\n     *  ln(0)         = -Infinity\r\n     *  ln(-0)        = -Infinity\r\n     *  ln(1)         = 0\r\n     *  ln(Infinity)  = Infinity\r\n     *  ln(-Infinity) = NaN\r\n     *  ln(NaN)       = NaN\r\n     *\r\n     *  ln(n) (n != 1) is non-terminating.\r\n     *\r\n     */\r\n    function naturalLogarithm(y, sd) {\r\n      var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n        n = 1,\r\n        guard = 10,\r\n        x = y,\r\n        xd = x.d,\r\n        Ctor = x.constructor,\r\n        rm = Ctor.rounding,\r\n        pr = Ctor.precision;\r\n  \r\n      // Is x negative or Infinity, NaN, 0 or 1?\r\n      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n      }\r\n  \r\n      if (sd == null) {\r\n        external = false;\r\n        wpr = pr;\r\n      } else {\r\n        wpr = sd;\r\n      }\r\n  \r\n      Ctor.precision = wpr += guard;\r\n      c = digitsToString(xd);\r\n      c0 = c.charAt(0);\r\n  \r\n      if (Math.abs(e = x.e) < 1.5e15) {\r\n  \r\n        // Argument reduction.\r\n        // The series converges faster the closer the argument is to 1, so using\r\n        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n        // later be divided by this number, then separate out the power of 10 using\r\n        // ln(a*10^b) = ln(a) + b*ln(10).\r\n  \r\n        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n        // max n is 6 (gives 0.7 - 1.3)\r\n        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n          x = x.times(y);\r\n          c = digitsToString(x.d);\r\n          c0 = c.charAt(0);\r\n          n++;\r\n        }\r\n  \r\n        e = x.e;\r\n  \r\n        if (c0 > 1) {\r\n          x = new Ctor('0.' + c);\r\n          e++;\r\n        } else {\r\n          x = new Ctor(c0 + '.' + c.slice(1));\r\n        }\r\n      } else {\r\n  \r\n        // The argument reduction method above may result in overflow if the argument y is a massive\r\n        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n        // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n        t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n        x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n        Ctor.precision = pr;\r\n  \r\n        return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n      }\r\n  \r\n      // x1 is x reduced to a value near 1.\r\n      x1 = x;\r\n  \r\n      // Taylor series.\r\n      // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n      // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n      sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n      x2 = finalise(x.times(x), wpr, 1);\r\n      denominator = 3;\r\n  \r\n      for (;;) {\r\n        numerator = finalise(numerator.times(x2), wpr, 1);\r\n        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n  \r\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n          sum = sum.times(2);\r\n  \r\n          // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n          // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n          if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n          sum = divide(sum, new Ctor(n), wpr, 1);\r\n  \r\n          // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n          // been repeated previously) and the first 4 rounding digits 9999?\r\n          // If so, restart the summation with a higher precision, otherwise\r\n          // e.g. with precision: 12, rounding: 1\r\n          // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n          // `wpr - guard` is the index of first rounding digit.\r\n          if (sd == null) {\r\n            if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n              Ctor.precision = wpr += guard;\r\n              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n              x2 = finalise(x.times(x), wpr, 1);\r\n              denominator = rep = 1;\r\n            } else {\r\n              return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n            }\r\n          } else {\r\n            Ctor.precision = pr;\r\n            return sum;\r\n          }\r\n        }\r\n  \r\n        sum = t;\r\n        denominator += 2;\r\n      }\r\n    }\r\n  \r\n  \r\n    // ±Infinity, NaN.\r\n    function nonFiniteToString(x) {\r\n      // Unsigned.\r\n      return String(x.s * x.s / 0);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Parse the value of a new Decimal `x` from string `str`.\r\n     */\r\n    function parseDecimal(x, str) {\r\n      var e, i, len;\r\n  \r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n  \r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n  \r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n  \r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n  \r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n  \r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n      str = str.slice(i, len);\r\n  \r\n      if (str) {\r\n        len -= i;\r\n        x.e = e = e - i - 1;\r\n        x.d = [];\r\n  \r\n        // Transform base\r\n  \r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first word of the digits array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;\r\n  \r\n        if (i < len) {\r\n          if (i) x.d.push(+str.slice(0, i));\r\n          for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n          str = str.slice(i);\r\n          i = LOG_BASE - str.length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n  \r\n        for (; i--;) str += '0';\r\n        x.d.push(+str);\r\n  \r\n        if (external) {\r\n  \r\n          // Overflow?\r\n          if (x.e > x.constructor.maxE) {\r\n  \r\n            // Infinity.\r\n            x.d = null;\r\n            x.e = NaN;\r\n  \r\n          // Underflow?\r\n          } else if (x.e < x.constructor.minE) {\r\n  \r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n            // x.constructor.underflow = true;\r\n          } // else x.constructor.underflow = false;\r\n        }\r\n      } else {\r\n  \r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n      }\r\n  \r\n      return x;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n     */\r\n    function parseOther(x, str) {\r\n      var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n  \r\n      if (str.indexOf('_') > -1) {\r\n        str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n        if (isDecimal.test(str)) return parseDecimal(x, str);\r\n      } else if (str === 'Infinity' || str === 'NaN') {\r\n        if (!+str) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return x;\r\n      }\r\n  \r\n      if (isHex.test(str))  {\r\n        base = 16;\r\n        str = str.toLowerCase();\r\n      } else if (isBinary.test(str))  {\r\n        base = 2;\r\n      } else if (isOctal.test(str))  {\r\n        base = 8;\r\n      } else {\r\n        throw Error(invalidArgument + str);\r\n      }\r\n  \r\n      // Is there a binary exponent part?\r\n      i = str.search(/p/i);\r\n  \r\n      if (i > 0) {\r\n        p = +str.slice(i + 1);\r\n        str = str.substring(2, i);\r\n      } else {\r\n        str = str.slice(2);\r\n      }\r\n  \r\n      // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n      // fraction part will be restored.\r\n      i = str.indexOf('.');\r\n      isFloat = i >= 0;\r\n      Ctor = x.constructor;\r\n  \r\n      if (isFloat) {\r\n        str = str.replace('.', '');\r\n        len = str.length;\r\n        i = len - i;\r\n  \r\n        // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n        divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n      }\r\n  \r\n      xd = convertBase(str, base, BASE);\r\n      xe = xd.length - 1;\r\n  \r\n      // Remove trailing zeros.\r\n      for (i = xe; xd[i] === 0; --i) xd.pop();\r\n      if (i < 0) return new Ctor(x.s * 0);\r\n      x.e = getBase10Exponent(xd, xe);\r\n      x.d = xd;\r\n      external = false;\r\n  \r\n      // At what precision to perform the division to ensure exact conversion?\r\n      // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n      // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n      // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n      // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n      // Therefore using 4 * the number of digits of str will always be enough.\r\n      if (isFloat) x = divide(x, divisor, len * 4);\r\n  \r\n      // Multiply by the binary exponent part if present.\r\n      if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n      external = true;\r\n  \r\n      return x;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * sin(x) = x - x^3/3! + x^5/5! - ...\r\n     * |x| < pi/2\r\n     *\r\n     */\r\n    function sine(Ctor, x) {\r\n      var k,\r\n        len = x.d.length;\r\n  \r\n      if (len < 3) {\r\n        return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n      }\r\n  \r\n      // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n      // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n      // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n  \r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n  \r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x);\r\n  \r\n      // Reverse argument reduction\r\n      var sin2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sin2_x = x.times(x);\r\n        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n      }\r\n  \r\n      return x;\r\n    }\r\n  \r\n  \r\n    // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n    function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n      var j, t, u, x2,\r\n        i = 1,\r\n        pr = Ctor.precision,\r\n        k = Math.ceil(pr / LOG_BASE);\r\n  \r\n      external = false;\r\n      x2 = x.times(x);\r\n      u = new Ctor(y);\r\n  \r\n      for (;;) {\r\n        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n        u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n        t = u.plus(y);\r\n  \r\n        if (t.d[k] !== void 0) {\r\n          for (j = k; t.d[j] === u.d[j] && j--;);\r\n          if (j == -1) break;\r\n        }\r\n  \r\n        j = u;\r\n        u = y;\r\n        y = t;\r\n        t = j;\r\n        i++;\r\n      }\r\n  \r\n      external = true;\r\n      t.d.length = k + 1;\r\n  \r\n      return t;\r\n    }\r\n  \r\n  \r\n    // Exponent e must be positive and non-zero.\r\n    function tinyPow(b, e) {\r\n      var n = b;\r\n      while (--e) n *= b;\r\n      return n;\r\n    }\r\n  \r\n  \r\n    // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n    function toLessThanHalfPi(Ctor, x) {\r\n      var t,\r\n        isNeg = x.s < 0,\r\n        pi = getPi(Ctor, Ctor.precision, 1),\r\n        halfPi = pi.times(0.5);\r\n  \r\n      x = x.abs();\r\n  \r\n      if (x.lte(halfPi)) {\r\n        quadrant = isNeg ? 4 : 1;\r\n        return x;\r\n      }\r\n  \r\n      t = x.divToInt(pi);\r\n  \r\n      if (t.isZero()) {\r\n        quadrant = isNeg ? 3 : 2;\r\n      } else {\r\n        x = x.minus(t.times(pi));\r\n  \r\n        // 0 <= x < pi\r\n        if (x.lte(halfPi)) {\r\n          quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n          return x;\r\n        }\r\n  \r\n        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n      }\r\n  \r\n      return x.minus(pi).abs();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return the value of Decimal `x` as a string in base `baseOut`.\r\n     *\r\n     * If the optional `sd` argument is present include a binary exponent suffix.\r\n     */\r\n    function toStringBinary(x, baseOut, sd, rm) {\r\n      var base, e, i, k, len, roundUp, str, xd, y,\r\n        Ctor = x.constructor,\r\n        isExp = sd !== void 0;\r\n  \r\n      if (isExp) {\r\n        checkInt32(sd, 1, MAX_DIGITS);\r\n        if (rm === void 0) rm = Ctor.rounding;\r\n        else checkInt32(rm, 0, 8);\r\n      } else {\r\n        sd = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      }\r\n  \r\n      if (!x.isFinite()) {\r\n        str = nonFiniteToString(x);\r\n      } else {\r\n        str = finiteToString(x);\r\n        i = str.indexOf('.');\r\n  \r\n        // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n        // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n        // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n        // log[2](10) = 3.321928094887362347870319429489390175864\r\n  \r\n        if (isExp) {\r\n          base = 2;\r\n          if (baseOut == 16) {\r\n            sd = sd * 4 - 3;\r\n          } else if (baseOut == 8) {\r\n            sd = sd * 3 - 2;\r\n          }\r\n        } else {\r\n          base = baseOut;\r\n        }\r\n  \r\n        // Convert the number as an integer then divide the result by its base raised to a power such\r\n        // that the fraction part will be restored.\r\n  \r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          str = str.replace('.', '');\r\n          y = new Ctor(1);\r\n          y.e = str.length - i;\r\n          y.d = convertBase(finiteToString(y), 10, base);\r\n          y.e = y.d.length;\r\n        }\r\n  \r\n        xd = convertBase(str, 10, base);\r\n        e = len = xd.length;\r\n  \r\n        // Remove trailing zeros.\r\n        for (; xd[--len] == 0;) xd.pop();\r\n  \r\n        if (!xd[0]) {\r\n          str = isExp ? '0p+0' : '0';\r\n        } else {\r\n          if (i < 0) {\r\n            e--;\r\n          } else {\r\n            x = new Ctor(x);\r\n            x.d = xd;\r\n            x.e = e;\r\n            x = divide(x, y, sd, rm, 0, base);\r\n            xd = x.d;\r\n            e = x.e;\r\n            roundUp = inexact;\r\n          }\r\n  \r\n          // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n          i = xd[sd];\r\n          k = base / 2;\r\n          roundUp = roundUp || xd[sd + 1] !== void 0;\r\n  \r\n          roundUp = rm < 4\r\n            ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n            : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n              rm === (x.s < 0 ? 8 : 7));\r\n  \r\n          xd.length = sd;\r\n  \r\n          if (roundUp) {\r\n  \r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (; ++xd[--sd] > base - 1;) {\r\n              xd[sd] = 0;\r\n              if (!sd) {\r\n                ++e;\r\n                xd.unshift(1);\r\n              }\r\n            }\r\n          }\r\n  \r\n          // Determine trailing zeros.\r\n          for (len = xd.length; !xd[len - 1]; --len);\r\n  \r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n  \r\n          // Add binary exponent suffix?\r\n          if (isExp) {\r\n            if (len > 1) {\r\n              if (baseOut == 16 || baseOut == 8) {\r\n                i = baseOut == 16 ? 4 : 3;\r\n                for (--len; len % i; len++) str += '0';\r\n                xd = convertBase(str, base, baseOut);\r\n                for (len = xd.length; !xd[len - 1]; --len);\r\n  \r\n                // xd[0] will always be be 1\r\n                for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n              } else {\r\n                str = str.charAt(0) + '.' + str.slice(1);\r\n              }\r\n            }\r\n  \r\n            str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n          } else if (e < 0) {\r\n            for (; ++e;) str = '0' + str;\r\n            str = '0.' + str;\r\n          } else {\r\n            if (++e > len) for (e -= len; e-- ;) str += '0';\r\n            else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n          }\r\n        }\r\n  \r\n        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n      }\r\n  \r\n      return x.s < 0 ? '-' + str : str;\r\n    }\r\n  \r\n  \r\n    // Does not strip trailing zeros.\r\n    function truncate(arr, len) {\r\n      if (arr.length > len) {\r\n        arr.length = len;\r\n        return true;\r\n      }\r\n    }\r\n  \r\n  \r\n    // Decimal methods\r\n  \r\n  \r\n    /*\r\n     *  abs\r\n     *  acos\r\n     *  acosh\r\n     *  add\r\n     *  asin\r\n     *  asinh\r\n     *  atan\r\n     *  atanh\r\n     *  atan2\r\n     *  cbrt\r\n     *  ceil\r\n     *  clamp\r\n     *  clone\r\n     *  config\r\n     *  cos\r\n     *  cosh\r\n     *  div\r\n     *  exp\r\n     *  floor\r\n     *  hypot\r\n     *  ln\r\n     *  log\r\n     *  log2\r\n     *  log10\r\n     *  max\r\n     *  min\r\n     *  mod\r\n     *  mul\r\n     *  pow\r\n     *  random\r\n     *  round\r\n     *  set\r\n     *  sign\r\n     *  sin\r\n     *  sinh\r\n     *  sqrt\r\n     *  sub\r\n     *  sum\r\n     *  tan\r\n     *  tanh\r\n     *  trunc\r\n     */\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the absolute value of `x`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function abs(x) {\r\n      return new this(x).abs();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function acos(x) {\r\n      return new this(x).acos();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n     * `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function acosh(x) {\r\n      return new this(x).acosh();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     * y {number|string|Decimal}\r\n     *\r\n     */\r\n    function add(x, y) {\r\n      return new this(x).plus(y);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function asin(x) {\r\n      return new this(x).asin();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n     * `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function asinh(x) {\r\n      return new this(x).asinh();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function atan(x) {\r\n      return new this(x).atan();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n     * `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function atanh(x) {\r\n      return new this(x).atanh();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n     * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * Domain: [-Infinity, Infinity]\r\n     * Range: [-pi, pi]\r\n     *\r\n     * y {number|string|Decimal} The y-coordinate.\r\n     * x {number|string|Decimal} The x-coordinate.\r\n     *\r\n     * atan2(±0, -0)               = ±pi\r\n     * atan2(±0, +0)               = ±0\r\n     * atan2(±0, -x)               = ±pi for x > 0\r\n     * atan2(±0, x)                = ±0 for x > 0\r\n     * atan2(-y, ±0)               = -pi/2 for y > 0\r\n     * atan2(y, ±0)                = pi/2 for y > 0\r\n     * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n     * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n     * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n     * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n     * atan2(±Infinity, +Infinity) = ±pi/4\r\n     * atan2(NaN, x) = NaN\r\n     * atan2(y, NaN) = NaN\r\n     *\r\n     */\r\n    function atan2(y, x) {\r\n      y = new this(y);\r\n      x = new this(x);\r\n      var r,\r\n        pr = this.precision,\r\n        rm = this.rounding,\r\n        wpr = pr + 4;\r\n  \r\n      // Either NaN\r\n      if (!y.s || !x.s) {\r\n        r = new this(NaN);\r\n  \r\n      // Both ±Infinity\r\n      } else if (!y.d && !x.d) {\r\n        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n        r.s = y.s;\r\n  \r\n      // x is ±Infinity or y is ±0\r\n      } else if (!x.d || y.isZero()) {\r\n        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n        r.s = y.s;\r\n  \r\n      // y is ±Infinity or x is ±0\r\n      } else if (!y.d || x.isZero()) {\r\n        r = getPi(this, wpr, 1).times(0.5);\r\n        r.s = y.s;\r\n  \r\n      // Both non-zero and finite\r\n      } else if (x.s < 0) {\r\n        this.precision = wpr;\r\n        this.rounding = 1;\r\n        r = this.atan(divide(y, x, wpr, 1));\r\n        x = getPi(this, wpr, 1);\r\n        this.precision = pr;\r\n        this.rounding = rm;\r\n        r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n      } else {\r\n        r = this.atan(divide(y, x, wpr, 1));\r\n      }\r\n  \r\n      return r;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function cbrt(x) {\r\n      return new this(x).cbrt();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function ceil(x) {\r\n      return finalise(x = new this(x), x.e + 1, 2);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     * min {number|string|Decimal}\r\n     * max {number|string|Decimal}\r\n     *\r\n     */\r\n    function clamp(x, min, max) {\r\n      return new this(x).clamp(min, max);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Configure global settings for a Decimal constructor.\r\n     *\r\n     * `obj` is an object with one or more of the following properties,\r\n     *\r\n     *   precision  {number}\r\n     *   rounding   {number}\r\n     *   toExpNeg   {number}\r\n     *   toExpPos   {number}\r\n     *   maxE       {number}\r\n     *   minE       {number}\r\n     *   modulo     {number}\r\n     *   crypto     {boolean|number}\r\n     *   defaults   {true}\r\n     *\r\n     * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n     *\r\n     */\r\n    function config(obj) {\r\n      if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n      var i, p, v,\r\n        useDefaults = obj.defaults === true,\r\n        ps = [\r\n          'precision', 1, MAX_DIGITS,\r\n          'rounding', 0, 8,\r\n          'toExpNeg', -EXP_LIMIT, 0,\r\n          'toExpPos', 0, EXP_LIMIT,\r\n          'maxE', 0, EXP_LIMIT,\r\n          'minE', -EXP_LIMIT, 0,\r\n          'modulo', 0, 9\r\n        ];\r\n  \r\n      for (i = 0; i < ps.length; i += 3) {\r\n        if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n        if ((v = obj[p]) !== void 0) {\r\n          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n          else throw Error(invalidArgument + p + ': ' + v);\r\n        }\r\n      }\r\n  \r\n      if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (v === true || v === false || v === 0 || v === 1) {\r\n          if (v) {\r\n            if (typeof crypto != 'undefined' && crypto &&\r\n              (crypto.getRandomValues || crypto.randomBytes)) {\r\n              this[p] = true;\r\n            } else {\r\n              throw Error(cryptoUnavailable);\r\n            }\r\n          } else {\r\n            this[p] = false;\r\n          }\r\n        } else {\r\n          throw Error(invalidArgument + p + ': ' + v);\r\n        }\r\n      }\r\n  \r\n      return this;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function cos(x) {\r\n      return new this(x).cos();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function cosh(x) {\r\n      return new this(x).cosh();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n     * constructor.\r\n     *\r\n     */\r\n    function clone(obj) {\r\n      var i, p, ps;\r\n  \r\n      /*\r\n       * The Decimal constructor and exported function.\r\n       * Return a new Decimal instance.\r\n       *\r\n       * v {number|string|Decimal} A numeric value.\r\n       *\r\n       */\r\n      function Decimal(v) {\r\n        var e, i, t,\r\n          x = this;\r\n  \r\n        // Decimal called without new.\r\n        if (!(x instanceof Decimal)) return new Decimal(v);\r\n  \r\n        // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n        // which points to Object.\r\n        x.constructor = Decimal;\r\n  \r\n        // Duplicate.\r\n        if (isDecimalInstance(v)) {\r\n          x.s = v.s;\r\n  \r\n          if (external) {\r\n            if (!v.d || v.e > Decimal.maxE) {\r\n  \r\n              // Infinity.\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (v.e < Decimal.minE) {\r\n  \r\n              // Zero.\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = v.e;\r\n              x.d = v.d.slice();\r\n            }\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d ? v.d.slice() : v.d;\r\n          }\r\n  \r\n          return;\r\n        }\r\n  \r\n        t = typeof v;\r\n  \r\n        if (t === 'number') {\r\n          if (v === 0) {\r\n            x.s = 1 / v < 0 ? -1 : 1;\r\n            x.e = 0;\r\n            x.d = [0];\r\n            return;\r\n          }\r\n  \r\n          if (v < 0) {\r\n            v = -v;\r\n            x.s = -1;\r\n          } else {\r\n            x.s = 1;\r\n          }\r\n  \r\n          // Fast path for small integers.\r\n          if (v === ~~v && v < 1e7) {\r\n            for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n  \r\n            if (external) {\r\n              if (e > Decimal.maxE) {\r\n                x.e = NaN;\r\n                x.d = null;\r\n              } else if (e < Decimal.minE) {\r\n                x.e = 0;\r\n                x.d = [0];\r\n              } else {\r\n                x.e = e;\r\n                x.d = [v];\r\n              }\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n  \r\n            return;\r\n  \r\n          // Infinity, NaN.\r\n          } else if (v * 0 !== 0) {\r\n            if (!v) x.s = NaN;\r\n            x.e = NaN;\r\n            x.d = null;\r\n            return;\r\n          }\r\n  \r\n          return parseDecimal(x, v.toString());\r\n  \r\n        } else if (t !== 'string') {\r\n          throw Error(invalidArgument + v);\r\n        }\r\n  \r\n        // Minus sign?\r\n        if ((i = v.charCodeAt(0)) === 45) {\r\n          v = v.slice(1);\r\n          x.s = -1;\r\n        } else {\r\n          // Plus sign?\r\n          if (i === 43) v = v.slice(1);\r\n          x.s = 1;\r\n        }\r\n  \r\n        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n      }\r\n  \r\n      Decimal.prototype = P;\r\n  \r\n      Decimal.ROUND_UP = 0;\r\n      Decimal.ROUND_DOWN = 1;\r\n      Decimal.ROUND_CEIL = 2;\r\n      Decimal.ROUND_FLOOR = 3;\r\n      Decimal.ROUND_HALF_UP = 4;\r\n      Decimal.ROUND_HALF_DOWN = 5;\r\n      Decimal.ROUND_HALF_EVEN = 6;\r\n      Decimal.ROUND_HALF_CEIL = 7;\r\n      Decimal.ROUND_HALF_FLOOR = 8;\r\n      Decimal.EUCLID = 9;\r\n  \r\n      Decimal.config = Decimal.set = config;\r\n      Decimal.clone = clone;\r\n      Decimal.isDecimal = isDecimalInstance;\r\n  \r\n      Decimal.abs = abs;\r\n      Decimal.acos = acos;\r\n      Decimal.acosh = acosh;        // ES6\r\n      Decimal.add = add;\r\n      Decimal.asin = asin;\r\n      Decimal.asinh = asinh;        // ES6\r\n      Decimal.atan = atan;\r\n      Decimal.atanh = atanh;        // ES6\r\n      Decimal.atan2 = atan2;\r\n      Decimal.cbrt = cbrt;          // ES6\r\n      Decimal.ceil = ceil;\r\n      Decimal.clamp = clamp;\r\n      Decimal.cos = cos;\r\n      Decimal.cosh = cosh;          // ES6\r\n      Decimal.div = div;\r\n      Decimal.exp = exp;\r\n      Decimal.floor = floor;\r\n      Decimal.hypot = hypot;        // ES6\r\n      Decimal.ln = ln;\r\n      Decimal.log = log;\r\n      Decimal.log10 = log10;        // ES6\r\n      Decimal.log2 = log2;          // ES6\r\n      Decimal.max = max;\r\n      Decimal.min = min;\r\n      Decimal.mod = mod;\r\n      Decimal.mul = mul;\r\n      Decimal.pow = pow;\r\n      Decimal.random = random;\r\n      Decimal.round = round;\r\n      Decimal.sign = sign;          // ES6\r\n      Decimal.sin = sin;\r\n      Decimal.sinh = sinh;          // ES6\r\n      Decimal.sqrt = sqrt;\r\n      Decimal.sub = sub;\r\n      Decimal.sum = sum;\r\n      Decimal.tan = tan;\r\n      Decimal.tanh = tanh;          // ES6\r\n      Decimal.trunc = trunc;        // ES6\r\n  \r\n      if (obj === void 0) obj = {};\r\n      if (obj) {\r\n        if (obj.defaults !== true) {\r\n          ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n          for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n        }\r\n      }\r\n  \r\n      Decimal.config(obj);\r\n  \r\n      return Decimal;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     * y {number|string|Decimal}\r\n     *\r\n     */\r\n    function div(x, y) {\r\n      return new this(x).div(y);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n     *\r\n     */\r\n    function exp(x) {\r\n      return new this(x).exp();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function floor(x) {\r\n      return finalise(x = new this(x), x.e + 1, 3);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n     * rounded to `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n     *\r\n     * arguments {number|string|Decimal}\r\n     *\r\n     */\r\n    function hypot() {\r\n      var i, n,\r\n        t = new this(0);\r\n  \r\n      external = false;\r\n  \r\n      for (i = 0; i < arguments.length;) {\r\n        n = new this(arguments[i++]);\r\n        if (!n.d) {\r\n          if (n.s) {\r\n            external = true;\r\n            return new this(1 / 0);\r\n          }\r\n          t = n;\r\n        } else if (t.d) {\r\n          t = t.plus(n.times(n));\r\n        }\r\n      }\r\n  \r\n      external = true;\r\n  \r\n      return t.sqrt();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n     * otherwise return false.\r\n     *\r\n     */\r\n    function isDecimalInstance(obj) {\r\n      return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function ln(x) {\r\n      return new this(x).ln();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n     * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n     *\r\n     * log[y](x)\r\n     *\r\n     * x {number|string|Decimal} The argument of the logarithm.\r\n     * y {number|string|Decimal} The base of the logarithm.\r\n     *\r\n     */\r\n    function log(x, y) {\r\n      return new this(x).log(y);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function log2(x) {\r\n      return new this(x).log(2);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function log10(x) {\r\n      return new this(x).log(10);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|Decimal}\r\n     *\r\n     */\r\n    function max() {\r\n      return maxOrMin(this, arguments, 'lt');\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|Decimal}\r\n     *\r\n     */\r\n    function min() {\r\n      return maxOrMin(this, arguments, 'gt');\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n     * using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     * y {number|string|Decimal}\r\n     *\r\n     */\r\n    function mod(x, y) {\r\n      return new this(x).mod(y);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     * y {number|string|Decimal}\r\n     *\r\n     */\r\n    function mul(x, y) {\r\n      return new this(x).mul(y);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} The base.\r\n     * y {number|string|Decimal} The exponent.\r\n     *\r\n     */\r\n    function pow(x, y) {\r\n      return new this(x).pow(y);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n     * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n     * are produced).\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n     *\r\n     */\r\n    function random(sd) {\r\n      var d, e, k, n,\r\n        i = 0,\r\n        r = new this(1),\r\n        rd = [];\r\n  \r\n      if (sd === void 0) sd = this.precision;\r\n      else checkInt32(sd, 1, MAX_DIGITS);\r\n  \r\n      k = Math.ceil(sd / LOG_BASE);\r\n  \r\n      if (!this.crypto) {\r\n        for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n  \r\n      // Browsers supporting crypto.getRandomValues.\r\n      } else if (crypto.getRandomValues) {\r\n        d = crypto.getRandomValues(new Uint32Array(k));\r\n  \r\n        for (; i < k;) {\r\n          n = d[i];\r\n  \r\n          // 0 <= n < 4294967296\r\n          // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n          if (n >= 4.29e9) {\r\n            d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n          } else {\r\n  \r\n            // 0 <= n <= 4289999999\r\n            // 0 <= (n % 1e7) <= 9999999\r\n            rd[i++] = n % 1e7;\r\n          }\r\n        }\r\n  \r\n      // Node.js supporting crypto.randomBytes.\r\n      } else if (crypto.randomBytes) {\r\n  \r\n        // buffer\r\n        d = crypto.randomBytes(k *= 4);\r\n  \r\n        for (; i < k;) {\r\n  \r\n          // 0 <= n < 2147483648\r\n          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n  \r\n          // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n          if (n >= 2.14e9) {\r\n            crypto.randomBytes(4).copy(d, i);\r\n          } else {\r\n  \r\n            // 0 <= n <= 2139999999\r\n            // 0 <= (n % 1e7) <= 9999999\r\n            rd.push(n % 1e7);\r\n            i += 4;\r\n          }\r\n        }\r\n  \r\n        i = k / 4;\r\n      } else {\r\n        throw Error(cryptoUnavailable);\r\n      }\r\n  \r\n      k = rd[--i];\r\n      sd %= LOG_BASE;\r\n  \r\n      // Convert trailing digits to zeros according to sd.\r\n      if (k && sd) {\r\n        n = mathpow(10, LOG_BASE - sd);\r\n        rd[i] = (k / n | 0) * n;\r\n      }\r\n  \r\n      // Remove trailing words which are zero.\r\n      for (; rd[i] === 0; i--) rd.pop();\r\n  \r\n      // Zero?\r\n      if (i < 0) {\r\n        e = 0;\r\n        rd = [0];\r\n      } else {\r\n        e = -1;\r\n  \r\n        // Remove leading words which are zero and adjust exponent accordingly.\r\n        for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n  \r\n        // Count the digits of the first word of rd to determine leading zeros.\r\n        for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n  \r\n        // Adjust the exponent for leading zeros of the first word of rd.\r\n        if (k < LOG_BASE) e -= LOG_BASE - k;\r\n      }\r\n  \r\n      r.e = e;\r\n      r.d = rd;\r\n  \r\n      return r;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n     *\r\n     * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function round(x) {\r\n      return finalise(x = new this(x), x.e + 1, this.rounding);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return\r\n     *   1    if x > 0,\r\n     *  -1    if x < 0,\r\n     *   0    if x is 0,\r\n     *  -0    if x is -0,\r\n     *   NaN  otherwise\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function sign(x) {\r\n      x = new this(x);\r\n      return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n     * using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function sin(x) {\r\n      return new this(x).sin();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function sinh(x) {\r\n      return new this(x).sinh();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function sqrt(x) {\r\n      return new this(x).sqrt();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n     * using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal}\r\n     * y {number|string|Decimal}\r\n     *\r\n     */\r\n    function sub(x, y) {\r\n      return new this(x).sub(y);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * Only the result is rounded, not the intermediate calculations.\r\n     *\r\n     * arguments {number|string|Decimal}\r\n     *\r\n     */\r\n    function sum() {\r\n      var i = 0,\r\n        args = arguments,\r\n        x = new this(args[i]);\r\n  \r\n      external = false;\r\n      for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n      external = true;\r\n  \r\n      return finalise(x, this.precision, this.rounding);\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n     * digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function tan(x) {\r\n      return new this(x).tan();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n     * significant digits using rounding mode `rounding`.\r\n     *\r\n     * x {number|string|Decimal} A value in radians.\r\n     *\r\n     */\r\n    function tanh(x) {\r\n      return new this(x).tanh();\r\n    }\r\n  \r\n  \r\n    /*\r\n     * Return a new Decimal whose value is `x` truncated to an integer.\r\n     *\r\n     * x {number|string|Decimal}\r\n     *\r\n     */\r\n    function trunc(x) {\r\n      return finalise(x = new this(x), x.e + 1, 1);\r\n    }\r\n  \r\n  \r\n    // Create and configure initial Decimal constructor.\r\n    Decimal = clone(DEFAULTS);\r\n    Decimal.prototype.constructor = Decimal;\r\n    Decimal['default'] = Decimal.Decimal = Decimal;\r\n  \r\n    // Create the internal constants from their string values.\r\n    LN10 = new Decimal(LN10);\r\n    PI = new Decimal(PI);\r\n  \r\n  \r\n    // Export.\r\n  \r\n  \r\n    // AMD.\r\n    if (typeof define == 'function' && define.amd) {\r\n      define(function () {\r\n        return Decimal;\r\n      });\r\n  \r\n    // Node and other environments that support module.exports.\r\n    } else if (typeof module != 'undefined' && module.exports) {\r\n      if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n        P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n        P[Symbol.toStringTag] = 'Decimal';\r\n      }\r\n  \r\n      module.exports = Decimal;\r\n  \r\n    // Browser.\r\n    } else {\r\n      if (!globalScope) {\r\n        globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n      }\r\n  \r\n      noConflict = globalScope.Decimal;\r\n      Decimal.noConflict = function () {\r\n        globalScope.Decimal = noConflict;\r\n        return Decimal;\r\n      };\r\n  \r\n      globalScope.Decimal = Decimal;\r\n    }\r\n  })(this);\r\n  ","{#each products as product}\n\t<Fruit \n\t\ton:click={incprice(product.price)}\n\n\t\t--color=\"rgba({product.color}, 20%)\" \n\t\t--hovercolor=\"rgba({product.color}, 60%)\" \n\t\t{...product} \n\t/>\n{/each}\n<br><br>\n\t\n<h2>Total: ${total}</h2>\n\n<script>\n\timport Fruit from './Fruit.svelte'\n\timport Decimal from './decimal.js'\n\n\tlet products = [\n\t\t{\n\t\t\tname: \"Apple\",\n\t\t\tprice: 0.99,\n\t\t\tcolor: \"255, 0, 0\",\n\t\t},\n\t\t{\n\t\t\tname: \"Banana\",\n\t\t\tprice: 2.99,\n\t\t\tcolor: \"255, 205, 0\"\n\t\t},\n\t]\n\n\tlet total = new Decimal(0)\n\n\tfunction incprice(price) {\n\t\treturn function() {\n\t\t\ttotal = total.add(new Decimal(price))\n\t\t}\n\t}\n\n</script>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","removeProperty","setProperty","current_component","set_current_component","component","bubble","event","callbacks","$$","type","slice","call","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","e","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","mount_component","customElement","m","new_on_destroy","on_mount","map","filter","on_destroy","destroy_component","detaching","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","handler","button","span","addEventListener","removeEventListener","price","globalScope","Decimal","inexact","noConflict","quadrant","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LN10_PRECISION","PI_PRECISION","P","toStringTag","digitsToString","ws","indexOfLastWord","str","w","getZeroString","checkInt32","min","max","Error","checkRoundingDigits","rm","repeating","di","r","rd","ceil","convertBase","baseIn","baseOut","j","arrL","arr","strL","charAt","reverse","absoluteValue","abs","x","constructor","s","finalise","clampedTo","clamp","Ctor","NaN","gt","cmp","comparedTo","y","xdL","ydL","xd","yd","xs","ys","cosine","cos","pr","sd","len","isZero","tinyPow","toString","taylorSeries","times","cos2x","minus","plus","toLessThanHalfPi","neg","cubeRoot","cbrt","n","rep","t","t3","t3plusx","isFinite","toExponential","divide","eq","decimalPlaces","dp","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","cosh2_x","d8","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","naturalLogarithm","getLn10","sub","xe","xLTy","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","carry","unshift","z","getPrecision","round","sine","sin","sin2_x","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","multiplyInteger","temp","compare","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","guard","sum","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","test","toLowerCase","isHyperbolic","u","pi","atan2","config","v","useDefaults","defaults","ps","getRandomValues","randomBytes","hypot","arguments","isDecimalInstance","log2","log10","random","Uint32Array","copy","clone","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","hasOwnProperty","module","exports","Symbol","iterator","self","window","color","levels","updates","to_null_out","accounted_for","$$scope","undefined","spread_props","br0","br1","h2","each_blocks","iterations","total","$$invalidate","body"],"mappings":"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"}